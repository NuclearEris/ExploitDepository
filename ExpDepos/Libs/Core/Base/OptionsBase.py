#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/3/24 14:16
"""

from ExpDepos.Libs.Core.Base.ExceptionBase import ExpDeposValidationException


class Option(object):
    """
    Exploit模块自定义选项类型
    """

    def __init__(self, default, description, require=False):
        self.description = description
        self.require = require
        if default:
            self.__set__("", default)
        else:
            self.value = ""

    def __get__(self):
        return self.value

    def __iter__(self):
        # first start by grabbing the Class items
        iters = dict((x, y) for x, y in Option.__dict__.items() if x[:2] != '__')

        # then update the class items with the instance items
        iters.update(self.__dict__)

        # now 'yield' through the items
        for x, y in iters.items():
            yield x, y


class OptString(Option):
    """
    String类型选项

    Args:
        default(String): 选项默认值
        description(String): 选项描述信息
        require(boolean): 是否必须
    """

    def __init__(self, default, description, require=False):
        super().__init__(default, description, require)
        self.type = "String"

    def __set__(self, obj, value):
        try:
            self.value = str(value)
        except ValueError:
            raise ExpDeposValidationException("选项错误.无法将值 {} 转换成 'String' 类型".format(value))


class OptInteger(Option):
    """
    String类型选项

    Args:
        default(String): 选项默认值
        description(String): 选项描述信息
        require(boolean): 是否必须
    """

    def __init__(self, default, description, require=False):
        super().__init__(default, description, require)
        self.type = "Integer"

    def __set__(self, obj, value):
        try:
            self.value = int(value)
        except ValueError:
            raise ExpDeposValidationException("选项错误.无法将值 {} 转换成 'Integer' 类型".format(value))


class OptFloat(Option):
    """
    String类型选项

    Args:
        default(String): 选项默认值
        description(String): 选项描述信息
        require(boolean): 是否必须
    """

    def __init__(self, default, description, require=False):
        super().__init__(default, description, require)
        self.type = "Float"

    def __set__(self, obj, value):
        try:
            self.value = float(value)
        except ValueError:
            raise ExpDeposValidationException("选项错误.无法将值 {} 转换成 'Float' 类型".format(value))


class OptBoolean(Option):
    """
    String类型选项

    Args:
        default(String): 选项默认值
        description(String): 选项描述信息
        require(boolean): 是否必须
    """

    def __init__(self, default, description, require=False):
        super().__init__(default, description, require)
        self.type = "Boolean"

    def __set__(self, obj, value):
        if isinstance(value, bool):
            self.value = value

        if value.lower() == "true":
            self.value = True
        elif value.lower == "false":
            self.value = False
        else:
            raise ExpDeposValidationException("选项错误.无法将值 {} 转换成 'Boolean' 类型".format(value))
