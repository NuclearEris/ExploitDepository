#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/3/14 10:50
"""

import os
import importlib
import sys
from importlib import util
from pip._internal.cli.main import main as pip_installMain
from ExpDepos.libs.core.common.Common import console
from ExpDepos.libs.core.common.Common import Root_Path
from ExpDepos.libs.core.base.Modulefinder import ModuleFinder


class ModuleLoader(object):
    """
    动态加载模块
    """

    @staticmethod
    def load_module_from_file(filepath):
        """
        根据模块文件名加载模块

        :param filepath: 文件名路径，用于确定模块包路径及模块名
        :return: 模块实例
        """
        if not filepath.endswith('.py'):
            filepath = filepath + '.py'
        # 检查模块依赖
        depend_module = ModuleLoader.check_module_dependency(filepath)
        console.debug("模块 '{0}' 依赖信息：{1}".format(filepath, depend_module['modules']))
        if len(depend_module['unload']) > 0:
            console.warning("模块 '{0}' 未安装依赖：{1}".format(filepath, depend_module['unload']))
            choose = ''
            while choose.lower() != 'y' and choose.lower() != 'n':
                choose = console.input("是否尝试自动安装依赖? Y/N:")
            if choose == 'n':
                return
            # 安装依赖模块
            ModuleLoader.install_module(depend_module['unload'])
        # 加载模块
        try:
            spec = ModuleLoader.get_spec(filepath)
            console.debug("使用模块SPEC：'{0}'".format(spec))
            module_name = ModuleLoader.get_filename(filepath, with_ext=False)
            if util.find_spec(spec) is None:
                raise Exception("无法加载模块 {0} 请确认模块文件路径是否正确.".format(spec))
            module = importlib.import_module(spec)
            if module is None:
                raise Exception("导入模块 {0} 失败 请确认模块文件路径及模块编写是否正确.".format(spec))
            console.debug("导入模块 {0}".format(module))
            module_class = getattr(module, module_name)
            module_exp = module_class()
            console.debug("从 {0} 中实例化对象 {1}".format(module_class, module_exp))
            if getattr(module_exp, "SPEC") is None:
                module_exp.SPEC = spec
            return module_exp
        except ModuleNotFoundError as e:
            console.error("{0}.请确认模块是否正确或是第三方模块已正确安装.".format(str(e)))
            raise e
        except FileNotFoundError as e:
            console.error("加载模块文件是错误,请确认模块文件是否正确.")
            raise e
        except NotImplementedError as e:
            console.error("模块'{0}' 实现错误,请编写必要功能方法.".format(spec))
        except Exception as e:
            console.exception(repr(e))

    @staticmethod
    def get_spec(filepath):
        return ModuleLoader.get_dir(filepath, with_filename=True).replace(os.sep, '.')

    @staticmethod
    def get_filename(filepath, with_ext=True):
        base_name = os.path.basename(filepath)
        return base_name if with_ext else os.path.splitext(base_name)[0]

    @staticmethod
    def get_dir(filepath, with_filename=False):
        base_dir = os.path.dirname(filepath)
        file_name = ModuleLoader.get_filename(filepath, with_ext=False)
        return base_dir if not with_filename else base_dir + os.sep + file_name

    @staticmethod
    def get_envPaths(filepath):
        file_dir = Root_Path() + os.sep + (ModuleLoader.get_dir(filepath, False))
        console.debug("添加sys.path：{0}".format(file_dir))
        return sys.path.append(file_dir)

    @staticmethod
    def check_module_dependency(filepath):
        """
        检查Python源文件的模块依赖

        :param filepath: 要检查的Python源文件路径
        :return: 返回包含所有模块(modules)的依赖及未加载(unload)的依赖模块名字典
        """
        module_finder = ModuleFinder(Root_Path() + os.sep + "ExpDepos" + os.sep + filepath)
        try:
            module_finder.analysis()
        except Exception as e:
            console.exception(repr(e))
        return {"modules": module_finder.modules, "unload": module_finder.unload_modules}

    @staticmethod
    def install_module(modules):
        """
        使用pip安装第三方模块
        :param modules: 需要安装的第三方模块列表
        :return:
        """
        for module in modules:
            console.debug("正在尝试安装第三方模块：'{0}'".format(module))
            try:
                pip_installMain(['install', module])
            except Exception as e:
                raise Exception("尝试安装第三方模块 '{0}' 失败, 原因: {1}".format(module, repr(e)))
