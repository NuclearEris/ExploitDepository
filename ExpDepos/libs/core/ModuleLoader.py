#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/3/14 10:50
"""

import os
import importlib
from importlib import util
from ExpDepos.libs.core.common.Common import console


class ModuleLoader(object):
    """
    动态加载模块
    """
    @staticmethod
    def load_module_from_file(filepath):
        """
        @function   根据模块文件名加载模块
        :param filepath: 文件名路径，用于确定模块包路径及模块名
        :return: 模块实例
        """
        if not filepath.endswith('.py'):
            filepath = filepath + '.py'
        try:
            spec = ModuleLoader.get_spec(filepath)
            console.debug("使用模块命名空间：{0}".format(spec))
            module_name = ModuleLoader.get_filename(filepath, with_ext=False)
            if util.find_spec(spec) is None:
                raise Exception("无法加载模块 {0} 请确认模块文件路径是否正确.".format(spec))
            module = importlib.import_module(spec)
            if module is None:
                raise Exception("导入模块 {0} 失败 请确认模块文件路径是否正确.".format(spec))
            console.debug("导入模块 {0}".format(module))
            module_class = getattr(module, module_name)
            module_exp = module_class()
            console.debug("从 {0} 中实例化对象 {1}".format(module_class, module_exp))
            return module_exp
        except Exception as e:
            raise Exception("无法加载模块 {0} 请确认模块文件路径是否正确.".format(spec))

    @staticmethod
    def get_spec(filepath):
        return ModuleLoader.get_dir(filepath, with_filename=True).replace(os.sep, '.')

    @staticmethod
    def get_filename(filepath, with_ext=True):
        base_name = os.path.basename(filepath)
        return base_name if with_ext else os.path.splitext(base_name)[0]

    @staticmethod
    def get_dir(filepath, with_filename=False):
        base_dir = os.path.dirname(filepath)
        file_name = ModuleLoader.get_filename(filepath, with_ext=False)
        return base_dir if not with_filename else base_dir + os.sep + file_name
