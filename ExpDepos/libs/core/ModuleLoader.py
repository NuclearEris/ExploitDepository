#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/3/14 10:50
"""

import os
import re
import importlib
import sys
from importlib import util
from pip._internal.cli.main import main as pip_installMain
from ExpDepos.libs.core.common.Common import console, none2str, bool2mark, format_module
from ExpDepos.libs.core.common.Common import Root_Path
from ExpDepos.libs.core.base.Modulefinder import ModuleFinder


class ModuleLoader(object):
    """
    动态加载模块
    """

    @staticmethod
    def load_module_from_file(filepath):
        """
        根据模块文件名加载模块

        :param filepath: 文件名路径，用于确定模块包路径及模块名
        :return: 已实例化的模块对象
        """
        if not filepath.endswith('.py'):
            filepath = filepath + '.py'
        # 检查模块依赖
        depend_module = ModuleLoader.check_module_dependency(filepath)
        console.debug("模块 '{0}' 依赖信息：{1}".format(filepath, depend_module['modules']))
        if len(depend_module['unload']) > 0:
            console.warning("模块 '{0}' 未安装依赖：{1}".format(filepath, depend_module['unload']))
            choose = ''
            while choose.lower() != 'y' and choose.lower() != 'n':
                choose = console.input("[bold yellow]正在尝试安装依赖,该功能可能会安装未受信任的第三方模块,对您的计算机造成威胁! "
                                       "确认是否自动安装依赖?[bold yellow] [bold green]Y/N:[/bold green]")
            if choose == 'n':
                console.warning("已忽略为 '{0}' 安装依赖 {1}".format(filepath, depend_module['unload']))
                return None
            # 安装依赖模块
            ModuleLoader.install_module(depend_module['unload'])
        # 加载模块
        try:
            spec = ModuleLoader.get_spec(filepath)
            console.debug("使用模块SPEC：'{0}'".format(spec))
            module_name = ModuleLoader.get_filename(filepath, with_ext=False)
            if util.find_spec(spec) is None:
                raise Exception("无法加载模块 {0} 请确认模块文件路径是否正确.".format(spec))
            module = importlib.import_module(spec)
            if module is None:
                raise Exception("导入模块 {0} 失败 请确认模块文件路径及模块编写是否正确.".format(spec))
            console.debug("导入模块 {0}".format(module))
            module_class = getattr(module, module_name)
            module_exp = module_class()
            console.debug("从 {0} 中实例化对象 {1}".format(module_class, module_exp))
            if getattr(module_exp, "SPEC") is None:
                module_exp.SPEC = spec
            return module_exp
        except ModuleNotFoundError as e:
            console.error("{0}.请确认模块是否正确或是第三方模块已正确安装.".format(str(e)))
            raise e
        except FileNotFoundError as e:
            console.error("加载模块文件是错误,请确认模块文件是否正确.")
            raise e
        except NotImplementedError as e:
            console.error("模块'{0}' 实现错误,请编写必要功能方法.".format(spec))
        except Exception as e:
            console.exception(repr(e))

    @staticmethod
    def get_spec(filepath):
        spec = ModuleLoader.get_dir(filepath, with_filename=True).replace(os.sep, '.')
        # 修复不同环境下传入的模块路径开头带有".\"或者"\"符号的兼容问题
        if not re.match(r"^modules.*", spec):
            spec = spec[spec.index("modules"):]
        return spec

    @staticmethod
    def get_filename(filepath, with_ext=True):
        base_name = os.path.basename(filepath)
        return base_name if with_ext else os.path.splitext(base_name)[0]

    @staticmethod
    def get_dir(filepath, with_filename=False):
        base_dir = os.path.dirname(filepath)
        file_name = ModuleLoader.get_filename(filepath, with_ext=False)
        return base_dir if not with_filename else base_dir + os.sep + file_name

    @staticmethod
    def get_envPaths(filepath):
        file_dir = Root_Path() + os.sep + (ModuleLoader.get_dir(filepath, False))
        console.debug("添加sys.path：{0}".format(file_dir))
        return sys.path.append(file_dir)

    @staticmethod
    def check_module_dependency(filepath):
        """
        检查Python源文件的模块依赖

        :param filepath: 要检查的Python源文件路径
        :return: 返回包含所有模块(modules)的依赖及未加载(unload)的依赖模块名字典
        """
        module_finder = ModuleFinder(Root_Path() + os.sep + "ExpDepos" + os.sep + filepath)
        try:
            module_finder.analysis()
        except Exception as e:
            console.exception(repr(e))
        return {"modules": module_finder.modules, "unload": module_finder.unload_modules}

    @staticmethod
    def install_module(modules):
        """
        使用pip安装第三方模块

        :param modules: 需要安装的第三方模块列表
        :return:
        """
        for module in modules:
            console.debug("正在尝试安装第三方模块：'{0}'".format(module))
            try:
                pip_installMain(['install', module])
            except Exception as e:
                raise Exception("尝试安装第三方模块 '{0}' 失败, 原因: {1}".format(module, repr(e)))

    @staticmethod
    def format_module_attr(value):
        """
        格式化模块基本信息

        :param value: 模块基本信息值
        :return: 格式化的字符串
        """
        format_str = ""
        if isinstance(value, list):
            for i, v in enumerate(value):
                if i != len(value) - 1:
                    format_str = format_str + v + "\n"
                else:
                    format_str = format_str + v
        else:
            format_str = value
        return str(format_str)

    @staticmethod
    def validation_is_static(key):
        """
        验证模块属性是否为用户自定义基本信息

        用户自定义模块基本信息(使用全大写或首字母大写方式,且由字母及下划线组成)
        :param key: 属性名称
        :return:
        """
        pattern = re.compile(r'[A-Z][_]?|^[A-Z].*[a-z][_]?')
        return pattern.match(key)

    @staticmethod
    def get_module_base_info(module_attr, module):
        """
        获取用户自定义的模块基本属性信息

        :param module_attr: 模块的属性字典
        :param module: exploit模块对象
        :return: 返回exploit模块中用户自定义的模块基本信息字典
        """
        base_info = dict()
        for key in module_attr:
            value = getattr(module, key)
            if ModuleLoader.validation_is_static(key) \
                    and (value is not None) \
                    and key != "OPTIONS":
                base_info.update({key: value})
        return base_info

    @staticmethod
    def get_module_info(module):
        """
        获取模块属性信息

        :param module: exploit模块对象
        :return: 模块基本属性及用户自定义选项的字典
        """
        module_attr = dir(module)
        base_info = ModuleLoader.get_module_base_info(module_attr, module)
        console.debug("获取模块 {0} 用户自定义静态属性 {1}".format(module.Name, base_info.keys()))
        options_info = module.OPTIONS
        console.debug("获取模块 {0} 用户自定义选项信息 {1}".format(module.Name, options_info.keys()))
        return {"base_info": base_info, "options_info": options_info}

    @staticmethod
    def show_options(module, options_info):
        """
        显示模块用户自定义选项表

        :param module: exploit模块对象
        :param options_info: 模块选项列表
        :return:
        """
        table = console.rTable("Name", "Current Setting", "Type", console.rColumn("Required"),
                               "Description", style="bold green", box=console.rBox.SIMPLE_HEAD, width=90)
        for key in options_info.keys():
            table.add_row(key,
                          none2str(module.get_option(key)),
                          "[dodger_blue2]" + module.OPTIONS[key].type + "[/dodger_blue2]",
                          bool2mark(module.OPTIONS[key].require),
                          "[cyan]" + module.OPTIONS[key].description + "[cyan]")
        console.print(table)

    @staticmethod
    def show_module_info(module):
        """
        显示模块详细信息

        :param module: exploit模块对象
        :return:
        """
        module_info = ModuleLoader.get_module_info(module)
        base_info = module_info.pop("base_info")
        options_info = module_info.pop("options_info")

        console.info("{0} 信息:".format(module.Name))

        # 使用rich.table格式化显示信息
        console.print("\nBasic Information([bold dark_red]{0}[/ bold dark_red])："
                      .format(format_module(base_info.get("SPEC"))), style="bold magenta3")
        grid = console.rTable.grid(expand=True)
        grid.add_column(style="cyan", width=6)
        grid.add_column(style="dodger_blue2")

        # 按序先显示重点属性
        grid.add_row("\tName: ", base_info.pop("Name"))
        grid.add_row("\tModule: ", format_module(base_info.pop("SPEC")))

        # 再显遍历显示剩余属性
        for key in base_info.keys():
            if key != "Description" and key != "References" and key != "Desc":
                grid.add_row("\t" + key + ": ", ModuleLoader.format_module_attr(base_info.get(key)))
        console.print(grid)

        # 显示用户自定义属性表
        console.print("\nBasic Options: ", style="bold magenta3")
        ModuleLoader.show_options(module, options_info)

        # 最后显示描述及参考信息
        if 'Desc' in base_info:
            console.print("\nVulnerable Description: ", style="bold magenta3")
            console.print(console.rMarkdown(base_info.pop("Desc")))
        if 'Description' in base_info:
            console.print("\nExploit Description: ", style="bold magenta3")
            console.print(console.rMarkdown(base_info.pop("Description")))
        if 'References' in base_info:
            console.print("\nReferences: ", style="bold magenta3")
            console.print("\t" + ModuleLoader.format_module_attr(base_info.pop("References")).replace("\n", "\n\t"))

    @staticmethod
    def set_module_opts(module, module_options):
        """
        批量设置模块用户自定义属性值

        :param module: exploit模块对象
        :param module_options: argparse 解析后的Namespace对象
        :return:
        """
        for key, value in vars(module_options).items():
            module.set_option(key, value)

    @staticmethod
    def run_module(module, options):
        """
        加载并执行指定模块

        :param module: 模块路径
        :param options: AttribDict 运行模块的参数信息
        :return:
        """
        module_path = module.replace("\\", os.sep).replace("/", os.sep)
        console.info("正在加载模块 '{0}'".format(module_path))
        try:
            module_exp = ModuleLoader.load_module_from_file(module_path)
        except Exception as error:
            module_exp = None
            console.exception(repr(error))
        if module_exp is None:
            raise Exception("模块 {0} 加载错误!".format(module_path))
        console.info("已加载模块 {0}".format(module_exp.Name))

        # 显示模块信息并退出
        if options.show_info:
            ModuleLoader.show_module_info(module_exp)
            exit()

        # 显示模块帮助信息并退出
        if options.module_help:
            module_exp.help()
            exit()

        # 解析模块参数
        module_options = module_exp.parse_options(options.options)
        if module_options is not None:
            console.debug("解析到模块参数：{0}".format(module_options))
            # 设置模块参数
            console.info("设置模块参数：{0}".format(vars(module_options)))
            ModuleLoader.set_module_opts(module_exp, module_options)
        # 设置HOST参数值
        module_exp.set_option('HOST', options.host)
        console.debug("模块当前设置：{0}".format(module_exp.get_options()))

        module_exp.run()
