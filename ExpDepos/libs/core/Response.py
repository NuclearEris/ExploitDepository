#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/3/13 22:11
"""

import re
import mmh3
import base64
import codecs
import hashlib
import typing
import chardet
import httpx
from httpx import SyncByteStream, AsyncByteStream, Request
from httpx._types import HeaderTypes, ResponseContent


class Response(httpx.Response):
    """
    扩展httpx.Response
    为后续指纹识别和漏洞验证提供实用功能
    """

    def __init__(self,
                 status_code: int,
                 *,
                 headers: HeaderTypes = None,
                 content: ResponseContent = None,
                 text: str = None, html: str = None,
                 json: typing.Any = None,
                 stream: typing.Union[SyncByteStream, AsyncByteStream] = None,
                 request: Request = None,
                 extensions: dict = None,
                 history: typing.List["Response"] = None):
        # 常用web中间件关键词列表
        self.servers = ['iis', 'apache', 'nginx', 'tomcat', 'weblogic',
                        'jboss', 'jetty', 'webshere', 'glasshfish', 'bws']
        super().__init__(status_code, headers=headers, content=content, text=text, html=html, json=json, stream=stream,
                         request=request, extensions=extensions, history=history)

    @property
    def hash(self) -> str:
        """
        mmh3 hash计算

        :return: mmh3 hash
        """
        return mmh3.hash(self.segmentBase64)

    @property
    def base64(self) -> str:
        """
        普通base64编码

        :return:
        """
        return str(base64.b64encode(self.content))

    @property
    def segmentBase64(self) -> bytes:
        """
        每76个字符加一个换行符'\n'的base64编码

        :return: str
        """
        return codecs.lookup('base64').encode(self.content)[0]

    @property
    def md5sum(self) -> str:
        """
        计算文件MD5值

        :return: str MD5值
        """
        return hashlib.md5(self.content).hexdigest()

    @property
    def server(self) -> str:
        """
        根据HTTP响应头判断服务器中间件是否为常用中间件

        :return:
        """
        if 'Server' not in self.headers:
            return None
        for server in self.servers:
            if server in self.headers['Server'].lower():
                return self.headers['Server']
        return None

    def get_encoding(self) -> str:
        """
        HTTP 响应编码检查
        默认使用HTTP头返回的编码信息 没有则使用chardet库检测

        :return: str
        """
        if self.encoding is not None:
            return self.encoding
        self.encoding = chardet.detect(self.content)['encoding']
        return self.encoding

    def search(self, regex: str) -> re.match:
        """
        在response.text中正则匹配regex

        :param regex: 需要匹配的正则表达式
        :return: re.match 匹配对象
        """
        return re.search(regex, self.text)

    def contains(self, keyword: str) -> bool:
        """
        检查response.text中是否包含keyword

        :param keyword: 需要查找的关键字
        :return: bool 是否含有关键字keyword
        """
        return keyword in self.text

    def bcontains(self, keyword: bytes) -> bool:
        """
        检查response.content中是否包含二进制内容keyword

        :param keyword: 需要查找的关键字
        :return: bool 是否含有关键字keyword
        """
        encoding = self.get_encoding()
        if encoding is None:
            encoding = "UTF-8"
        if not isinstance(keyword, bytes):
            keyword = bytes(keyword.encode(encoding))
        return keyword in self.content

