#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/8/15 11:30
"""

import os
import json
import base64
import time
import zipfile
import hashlib

from json import JSONDecodeError
from ExpDepos.libs.core.common.Console import Console
from tencentcloud.common import credential
from tencentcloud.common.common_client import CommonClient
from tencentcloud.common.exception.tencent_cloud_sdk_exception import TencentCloudSDKException
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from ExpDepos.libs.core.base.ExceptionBase import ExpDeposCloudFunctionException
from ExpDepos.libs.core.base.CloudFuntionBase import CloudFunctionBase
from ExpDepos.libs.core.common.Console import formatString

console = Console()


class TencentScf(CloudFunctionBase):
    """
    腾讯云函数自动部署实现
    """

    def __init__(self, scfCfg, user="defaultUser", useGlobal=False):
        super().__init__(scfCfg=scfCfg, useGlobal=useGlobal)
        self._cloudType = "tencent"
        self._cloudUser = user
        """
        self._regions = {"CN": {"ap-beijing": "华北地区(北京)", "ap-chengdu": "西南地区(成都)", "ap-chongqing": "西南地区(重庆)",
                                "ap-guangzhou": "华南地区(广州)", "ap-hongkong": "港澳台地区(中国香港)", "ap-shanghai": "华东地区(上海)",
                                "ap-shanghai-fsi": "华东地区(上海金融)", "ap-shenzhen-fsi": "华南地区(深圳金融)"},
                         "Global": {"ap-mumbai": "亚太南部(孟买)", "ap-seoul": "亚太东北(首尔)", "ap-singapore": "亚太东南(新加坡)",
                                    "ap-tokyo": "亚太东北(东京)", "eu-frankfurt": "欧洲地区(法兰克福)",
                                    "na-siliconvalley": "美国西部(硅谷)", "na-toronto": "北美地区(多伦多)"}
                         }
        """
        # 去掉 ap-chongqing 地区，目前腾讯云还不支持在该地区创建云函数
        self._regions = {"CN": {"ap-beijing": "华北地区(北京)", "ap-chengdu": "西南地区(成都)",
                                "ap-guangzhou": "华南地区(广州)", "ap-hongkong": "港澳台地区(中国香港)",
                                "ap-shanghai": "华东地区(上海)", "ap-shanghai-fsi": "华东地区(上海金融)",
                                "ap-shenzhen-fsi": "华南地区(深圳金融)"},
                         "Global": {"ap-mumbai": "亚太南部(孟买)", "ap-seoul": "亚太东北(首尔)",
                                    "ap-singapore": "亚太东南(新加坡)", "ap-tokyo": "亚太东北(东京)",
                                    "eu-frankfurt": "欧洲地区(法兰克福)", "na-siliconvalley": "美国西部(硅谷)",
                                    "na-toronto": "北美地区(多伦多)"}
                         }
        # API 接口调用配置
        self._service = 'scf'  # 默认产品名
        self._apiVersion = {"scf": "2018-04-16", "apigateway": "2018-08-08"}  # API版本，参见接口文档Version参数说明
        self._endpointDomain = 'tencentcloudapi.com'
        self._cred = credential.Credential(self.SecretId, self.SecretKey)  # 认证信息配置

        # 函数信息配置
        self._codeDir = self.cache_dir + 'functions' + os.sep + self.functionName + os.sep + 'src'
        self._functionParams = {
            "Description": "ExploitDepository 云函数，用于转发Exploit模块的HTTP Request请求",  # 函数描述信息
            "Handler": "index.main_handler",  # 函数入口
            "Timeout": 30,  # 函数执行超时时间
            "Runtime": "Python3.6",  # 运行环境
            "Type": "Event",  # 函数类型
            "CodeSource": "ZipFile",  # 代码来源 使用zip文件部署
        }
        self._code = None  # Base64编码后的源码包
        self._codeHash = None  # 源码MD5值 用于校验函数版本及一致性

        # 函数触发器配置
        self._triggerName = self.functionName + '_Trigger'  # 触发器名称
        self._triggerType = 'apigw'  # 触发器类型
        self._triggerAuth = "TRUE"  # 是否开启签权
        self._triggerAuthSecretName = "ExpDepos"  # 签权信息名称
        self._triggerMethod = "ANY"  # 触发器请求方式 ANY、GET、HEAD、POST、PUT、DELETE
        self._triggerTimeout = 60  # 触发器API网关服务超时时间
        self._triggerServiceName = "ExpDepos_API_Service"

        # 函数触发器API网关配置
        self._triggerApiUsagePlanName = "ExpDeposUsePlan"
        self._triggerApiUsagePlanDesc = "用于绑定API网关触发器签权信息的使用计划"

        # 预置并发配置
        if "Provisioned" in scfCfg:
            self._provisioned = True  # 是否开启预置并发 该功能目前需要申请内测才可用
            if "Number" in scfCfg["Provisioned"]:
                self._provisionedNumber = scfCfg["Provisioned"]["Number"]  # 自定义预置并发数
            else:
                self._provisionedNumber = 10  # 默认预置并发数

    @property
    def cred(self) -> credential.Credential:
        """
        API接口认证信息

        :return: credential.Credential
        """
        return self._cred

    @property
    def regions(self) -> list:
        """
        地域信息，如果useGlobal为True则返回中国地区及全球其他地区的地域列表和

        :return: list
        """
        if self.useGlobal:
            return list(self._regions['CN'].keys()) + list(self._regions['Global'])
        return list(self._regions['CN'].keys())

    @property
    def codeDir(self):
        """
        云函数源码路径

        :return:
        """
        return self._codeDir + os.sep if not self._codeDir.endswith(os.sep) else ''

    @property
    def code(self):
        if self._code:
            return self._code
        else:
            return self.codeZip2B64str(self.codePackage())

    @property
    def codeHash(self):
        """
        计算源码的hash值

        :return:
        """
        if self._codeHash:
            return self._codeHash
        # 计算入口文件hash值
        with open(self.codeDir + 'index.py', 'rb') as fileCode:
            self._codeHash = hashlib.md5(fileCode.read()).hexdigest()
        return self._codeHash

    def getApiVersion(self, service):
        """
        腾讯云API版本信息

        :return: str
        """
        if service in self._apiVersion:
            return self._apiVersion[service]
        return None

    def clientProfile(self, service=None, region=None) -> ClientProfile:
        """
        获取金融区或非金融区clientProfile

        :param region: 地域信息
        :param service: 产品名
        :return: ClientProfile
        """
        return self.getClientProfile(service, region)

    def getClientProfile(self, service, region):
        """
        获取金融区clientProfile

        :param service: 产品名
        :param region: 地域信息
        :return: ClientProfile
        """
        return ClientProfile(httpProfile=self.getHttpProfile(service, region))

    def getHttpProfile(self, service, region):
        """
        获取金融区HttpProfile

        :param service: 产品名
        :param region: 地域信息
        :return: HttpProfile
        """
        if region and 'fsi' in region:  # 获取金融区接口地址
            return HttpProfile(endpoint="{0}.{1}.{2}".format(service, region, self._endpointDomain))
        else:
            return HttpProfile(endpoint="{0}.{1}".format(service, self._endpointDomain))

    def getRegionName(self, region):
        regions = dict()
        regions.update(self._regions['CN'])
        regions.update(self._regions['Global'])
        if region in regions:
            return regions[region]
        return None

    def getFunctions(self, regions=None, filterNull=True, showAll=False):
        """
        获取云函数列表(默认只返回函数名称为self.functionName的函数列表)

        :param regions: 地域信息
        :param filterNull: 是否过滤没有创建云函数的地区
        :param showAll: 返回所有函数
        :return: list
        """
        if regions is None:
            regions = self.regions
        if isinstance(regions, list):
            funs = list()
            for region in regions:
                functions = self.getFunctions(region, filterNull=filterNull)
                if filterNull:  # 自定义是否过滤掉没有创建云函数的地区：[{"region": []}]
                    if len(functions[0][region]):
                        funs.extend(functions)
                else:
                    funs.extend(functions)
            return funs
        common_client = self.getCommonClient(regions)
        functions = common_client.call_json("ListFunctions", params={})
        if not showAll:
            return [{regions: [{"name": fun["FunctionName"]} for fun in functions["Response"]["Functions"]
                               if fun["FunctionName"] == self.functionName]}]
        else:
            return [{regions: [{"name": fun["FunctionName"]} for fun in functions["Response"]["Functions"]]}]

    def getFunction(self, functionName, region, show_code=True):
        """
        获取云函数详细信息

        :param functionName: 函数名称
        :param region: 地域信息
        :param show_code: 是否显示代码
        :return: dict
        """
        params = {
            "FunctionName": functionName,
            "ShowCode": "TRUE" if show_code else "FALSE"
        }
        common_client = self.getCommonClient(region=region)
        return common_client.call_json("GetFunction", params=params)

    def getVersionOfFunction(self, functionName, region, version=None):
        """
        获取函数版本信息

        :param functionName: 函数名称
        :param region: 地域信息
        :param version: 版本号
        :return:
        """
        common_client = self.getCommonClient(region=region)
        result = common_client.call_json("ListVersionByFunction", params={"FunctionName": functionName})
        versions = result["Response"]["Versions"]
        if version:
            return [v for v in versions if v["Version"] == version]
        else:
            return versions

    @staticmethod
    def getVersionStatusOfFunction(versions: list, version):
        """
        获取函数版本状态

        :param versions: 函数版本信息
        :param version: 函数版本号
        :return: str
        """
        for v in versions:
            if v["Version"] == version:
                return v["Status"]
        return None

    def getFunctionParams(self, functionName) -> dict:
        """
        构建创建云函数时所需的参数信息

        :param functionName: 函数名称
        :return: dict
        """
        params = self._functionParams
        Code = {
            "FunctionName": functionName,
            "Code": {"ZipFile": self.code}
        }
        params.update(Code)  # 设置代码内容
        return params

    def getTriggerParams(self, functionName, functionVersion="$DEFAULT") -> dict:
        """
        构建创建触发器时所需参数信息

        :param functionName: 函数名称
        :param functionVersion: 函数版本
        :return: dict
        """
        params = {
            "FunctionName": functionName,
            "TriggerName": self._triggerName,
            "Type": self._triggerType,
            "TriggerDesc": self.getTriggerDesc(),
            "Qualifier": functionVersion,
            "Enable": "OPEN"
        }
        return params

    def getTriggerDesc(self):
        """
        触发器对应的参数信息

        :return:
        """
        triggerDesc = {
            "api": {
                "authRequired": self._triggerAuth,
                "isIntegratedResponse": "FALSE",  # 是否启用集成响应 默认FALSE
                "isBase64Encoded": "TRUE",  # 是否启用Base64编码
                "serviceTimeout": self._triggerTimeout,
                "requestConfig": {
                    "method": self._triggerMethod
                }
            },
            "service": {
                "serviceName": self._triggerServiceName
            }
        }
        return json.dumps(triggerDesc)

    def getTriggers(self, functions, region=None) -> list:
        """
        获取云函数触发器列表(只返回TriggerName值为self._triggerName的触发器列表)

        :param functions: 函数名 可选列表或者单个函数名
        :param region: 地域信息
        :return: list
        """
        if isinstance(functions, list):
            triggers = list()
            for fun in functions:
                trigger = self.getTriggers(fun, region=region)
                triggers.extend(trigger)
            return triggers
        if isinstance(functions, dict):
            triggers = list()
            for region, funs in functions.items():
                trigger = self.getTriggers(funs, region=region)
                triggers.extend(trigger)
            return triggers
        common_client = self.getCommonClient(region)
        trigger = common_client.call_json("ListTriggers", params={"FunctionName": functions})
        return [trg for trg in trigger["Response"]["Triggers"] if trg["TriggerName"] == self._triggerName]

    def getApiOfTrigger(self, triggers, apiReqMethod=None) -> list:
        """
        从trigger或trigger列表中获取API接口地址

        :param triggers: 触发器
        :param apiReqMethod: API请求方法列表可选["ANY","GET","POST",...]等HTTP请求方法
        :return:
        """
        if not isinstance(apiReqMethod, list) and apiReqMethod is not None:
            apiReqMethod = [apiReqMethod]
        if isinstance(triggers, list):
            apis = list()
            for trigger in triggers:
                api = self.getApiOfTrigger(trigger, apiReqMethod=apiReqMethod)
                apis.extend(api)
            return apis
        if "TriggerDesc" not in triggers:
            raise ExpDeposCloudFunctionException("触发器格式错误！键值 'TriggerDesc' 不存在！")
        triggerDesc = json.loads(triggers["TriggerDesc"])
        if apiReqMethod:
            if triggerDesc["api"]["requestConfig"]["method"] not in apiReqMethod:  # 自定义过滤API请求方式
                return []
        return [triggerDesc["service"]["subDomain"]]

    def DescribeService(self, serviceId, region):
        """
        获取服务详情

        :param serviceId: 服务Id值
        :param region: 地域信息
        :return:
        """
        params = {
            "ServiceId": serviceId,
        }
        common_client = self.getCommonClient(service="apigateway", region=region)
        return common_client.call_json("DescribeService", params=params)

    def DescribeServiceList(self, region):
        """
        获取地区服务列表

        :param region: 地域信息
        :return:
        """
        common_client = self.getCommonClient(service="apigateway", region=region)
        serviceList = common_client.call_json("DescribeServicesStatus",
                                              params={"Filters": [{"Name": "ServiceName",
                                                                   "Values": [self._triggerServiceName]}]})
        return serviceList["Response"]["Result"]["ServiceSet"]

    def getApis(self) -> list:
        """
        获取云函数API网关触发器列表

        :return:
        """
        try:
            cacheFunctions = self.getFunCache()  # 从缓存文件中获取函数信息
            # 获取全部云函数,含未创建函数的地区
            functions = self.getFunctions(filterNull=False) if not cacheFunctions else cacheFunctions
            for function in functions:
                unAvailable = self.checkUnavailable(function)
                if unAvailable:
                    region = unAvailable[0]
                    console.info("为用户 [blue]{user}[/blue] [green]{0}[/green] 地区部署函数..."
                                 .format(region, user=self._cloudUser))
                    try:
                        trigger = self.deployFunction(region=region)
                    except ExpDeposCloudFunctionException as e:
                        console.warning(e.args[0])
                        continue
                    except TencentCloudSDKException as err:
                        console.exception(repr(err))
                        continue
                    if not trigger:
                        console.warning("为用户 [blue]{user}[/blue] [green]{0}[/green] 地区创建函数失败."
                                        .format(region, user=self._cloudUser))
                        continue
                else:
                    region = list(function.keys())[0]
                    funName = function[region][0]["name"]
                    if "trigger" in function[region][0] and function[region][0]["trigger"] is not None:
                        trigger = function[region][0]["trigger"]
                    else:
                        trigger = self.getTriggers(functions=funName, region=region)
                if not trigger:
                    console.warning("获取用户 [blue]{user}[/blue] [green]{0}[/green] 地区函数触发器信息失败！"
                                    .format(region, user=self._cloudUser))
                    continue
                if isinstance(trigger, list):
                    trigger = trigger[0]
                trigger_subDomain = self.getApiOfTrigger(trigger)
                if not trigger_subDomain:
                    console.warning("获取用户 [blue]{user}[/blue] [green]{0}[/green] 地区云函数API网关地址失败！"
                                    .format(region, user=self._cloudUser))
                    continue
                console.info("用户 [blue]{user}[/blue] [green]{0}[/green] 地区云函数部署完成, 获取API网关地址：{1}"
                             .format(region, trigger_subDomain, user=self._cloudUser))
                # 如果API网关触发器开启认证且缓存中没有认证信息，则从新获取认证信息
                if self._triggerAuth == "TRUE" \
                        or "accessKeys" not in function[region][0] \
                        or "usePlan" not in function[region][0]:
                    console.info("[green]{0}[/green] 地区API网关已启用签权, 正在获取并部署签权信息...".format(region))
                    with console.rConsole.status(formatString("[green]{0}[/green] 地区API网关已启用签权,"
                                                              " 正在配置签权信息...").format(region),
                                                 spinner="point"):
                        use_plan = api_keys = None
                        singCount = 1
                        while not use_plan or not api_keys:
                            if singCount == 1:
                                use_plan, api_keys = self.deploySignRight(function=function,
                                                                          trigger=trigger,
                                                                          region=region)
                            singCount += 1
                self.api_gateways.append({region: [{"name": self.functionName,
                                                    "codeHash": self.codeHash,
                                                    "trigger": trigger,
                                                    "subDomain": trigger_subDomain,
                                                    "accessKeys": api_keys,
                                                    "usePlan": [use_plan]}]})
                self.setCache()
            return self.api_gateways
        except TencentCloudSDKException as err:
            console.exception(repr(err))

    def getApiKeys(self, region, autoCreate=True):
        """
        获取API网关触发器认证信息

        :param region:
        :param autoCreate: 是否自动创建秘钥
        :return:
        """
        key_list = self.getApiKeyList(region=region)
        if key_list:
            return key_list[0]
        if autoCreate:
            console.debug("为 [green]{0}[/green] 地区创建密钥对: [magenta3]{1}[/magenta3]"
                          .format(region, self._triggerAuthSecretName))
            api_keys = self.createApiKeys(region)
            return api_keys
        return None

    def getApiKeyList(self, region):
        """
        获取region地区的API网关触发器认证信息列表

        :param region: 地域信息
        :return: list
        """
        filters = [  # 默认获取名字为 self._triggerAuthSecretName 的密钥对
            {"Name": "SecretName",
             "Values": [self._triggerAuthSecretName]
             },
            {"Name": "Status",
             "Values": ["1"]
             }
        ]
        common_client = self.getCommonClient(region=region, service="apigateway")
        key_list = common_client.call_json("DescribeApiKeysStatus", params={"Filters": filters})
        return key_list["Response"]["Result"]["ApiKeySet"] if key_list["Response"]["Result"] else None

    def createApiKeys(self, region):
        """
        为region地区创建密钥对

        :param region: 地域信息
        :return: dict apiKeys
        """
        common_client = self.getCommonClient(service="apigateway", region=region)
        result = common_client.call_json("CreateApiKey", params={"SecretName": self._triggerAuthSecretName})
        return result["Response"]["Result"] if result["Response"]["Result"] else None

    def createUsePlan(self, region):
        """
        为region地区创建使用计划

        :param region: 地域信息
        :return:
        """
        # 创建使用计划之前先解除绑定并删除所有使用计划
        usePlanList = self.getUsePlan(region=region)
        if usePlanList:
            for usePlan in usePlanList:
                usePlanInfo = self.getUsePlanInfo(usePlan, region=region)
                if usePlanInfo["BindEnvironments"]:
                    for bindEnv in usePlanInfo["BindEnvironments"]:
                        result = self.unbindEnvironment(usePlan=usePlanInfo["UsagePlanId"],
                                                        serviceId=bindEnv["ServiceId"],
                                                        bindType="SERVICE",
                                                        environment=bindEnv["EnvironmentName"],
                                                        region=region)
                        if result:
                            console.debug("从使用计划 [yellow]{0}[/yellow] 中解绑服务 [red]{1}[/red]"
                                          .format(usePlanInfo["UsagePlanId"], bindEnv["ServiceId"]))
                result = self.deleteUsePlan(usePlan, region=region)
                if result:
                    console.debug("已删除使用计划 [yellow]{0}[/yellow]".format(usePlan["UsagePlanId"]))
        params = {
            "UsagePlanName": self._triggerApiUsagePlanName,
            "UsagePlanDesc": self._triggerApiUsagePlanDesc
        }
        common_client = self.getCommonClient(service="apigateway", region=region)
        use_plan = common_client.call_json("CreateUsagePlan", params=params)
        return use_plan["Response"]["Result"] if use_plan["Response"]["Result"] else None

    def getUsePlan(self, region):
        """
        查询使用计划信息

        :param region: 地域信息
        :return:
        """
        params = {  # 默认获取名称为 self._triggerApiUsagePlanName 的使用计划
            "Filters": [
                {"Name": "UsagePlanName", "Values": [self._triggerApiUsagePlanName]}
            ]
        }
        common_client = self.getCommonClient(service="apigateway", region=region)
        usePlans = common_client.call_json("DescribeUsagePlansStatus", params=params)
        return usePlans["Response"]["Result"]["UsagePlanStatusSet"] \
            if usePlans["Response"]["Result"]["UsagePlanStatusSet"] else None

    def deleteUsePlan(self, usePlan, region):
        """
        删除使用计划

        :param usePlan: 使用计划信息
        :param region: 地域信息
        :return:
        """
        common_client = self.getCommonClient(service="apigateway", region=region)
        result = common_client.call_json("DeleteUsagePlan", params={"UsagePlanId": usePlan["UsagePlanId"]})
        return result["Response"]["Result"]

    def getUsePlanInfo(self, use_plan, region):
        """
        获取使用计划详细信息

        :param use_plan: 使用计划信息
        :param region: 地域信息
        :return:
        """
        params = {
            "UsagePlanId": use_plan["UsagePlanId"]
        }
        common_client = self.getCommonClient(service="apigateway", region=region)
        use_plan_info = common_client.call_json("DescribeUsagePlan", params=params)
        return use_plan_info["Response"]["Result"] if use_plan_info["Response"]["Result"] else None

    def getUsePlanOfFunction(self, function, region):
        """
        获取函数使用计划信息

        :param function: 函数信息
        :param region: 地域信息
        :return:
        """
        use_plan = [None]
        if not function[region]:
            use_plan = self.createUsePlan(region=region)  # 如果函数信息为空则创建新的usePlan
            console.debug("为 [green]{0}[/green] 地区创建使用计划：[yellow]{1}[/yellow]"
                          .format(region, use_plan["UsagePlanId"]))
        else:
            if "usePlan" in function[region][0] and None not in function[region][0]["usePlan"]:
                use_plan = function[region][0]["usePlan"]  # 如果缓存中有责从缓存中获取usePlan
            if None in use_plan or not use_plan or not use_plan:
                use_plan = self.getUsePlan(region=region)  # 没有则请求接口获取
            if isinstance(use_plan, list) and None not in use_plan and len(use_plan) >= 1:
                use_plan = use_plan[0]
            else:
                use_plan = self.createUsePlan(region=region)  # 接口请求没有获取到则创建新的usePlan
                console.debug("为 [green]{0}[/green] 地区创建使用计划：[yellow]{1}[/yellow]"
                              .format(region, use_plan["UsagePlanId"]))
        return use_plan

    def bindSecretIds(self, usePlan, api_keys: dict, region):
        """
        使用计划绑定密钥

        :param usePlan: 使用计划信息
        :param api_keys: 密钥信息(可选由多个包含API Secret信息的字典组成的列表)
        :param region: 地域信息
        :return:
        """
        if not isinstance(api_keys, list):
            api_keys = [api_keys]
        params = {
            "UsagePlanId": usePlan["UsagePlanId"],
            "AccessKeyIds": [api_key["AccessKeyId"] for api_key in api_keys]
        }
        common_client = self.getCommonClient(service="apigateway", region=region)
        result = common_client.call_json("BindSecretIds", params=params)
        return result["Response"]["Result"]

    def bindEnvironment(self, usePlan, trigger, region, bindType="SERVICE", environment="release", apiIds: list = None):
        """
        绑定使用计划到服务

        :param usePlan: 使用计划信息 可选由多个包含使用计划信息字典组成的列表
        :param trigger: API网关触发器信息
        :param region: 地域信息
        :param bindType: 绑定类型，可选API、SERVICE
        :param environment: 待绑定的环境 可选 test（测试环境）、prepub（预发布环境）和 release（发布环境）
        :param apiIds: API唯一ID数组，当bindType=API时，需要传入此参数
        :return:
        """
        if not isinstance(usePlan, list):
            usePlan = [usePlan]
        if "TriggerDesc" not in trigger:
            raise ExpDeposCloudFunctionException("为使用计划 [yellow]{0}[/yellow] 绑定环境出错，错误的API网关触发器信息: {1}"
                                                 .format([plan["UsagePlanId"] for plan in usePlan], trigger))
        triggerDesc = json.loads(trigger["TriggerDesc"])
        params = {
            "UsagePlanIds": [plan["UsagePlanId"] for plan in usePlan],
            "BindType": bindType,
            "Environment": environment,
            "ServiceId": triggerDesc["service"]["serviceId"]
        }
        if bindType == "API":
            params.update({
                "ApiIds": apiIds
            })
        common_client = self.getCommonClient(service="apigateway", region=region)
        result = common_client.call_json("BindEnvironment", params=params)
        return result["Response"]["Result"]

    def unbindEnvironment(self, usePlan, serviceId, bindType, environment, region, apiIds: list = None):
        """
        解绑使用计划服务

        :param usePlan: 使用计划ID
        :param serviceId: 服务Id
        :param bindType: 绑定类型
        :param environment: 绑定环境
        :param region: 地域信息
        :param apiIds: API ID 列表
        :return:
        """
        params = {
            "UsagePlanIds": [usePlan],
            "BindType": bindType,
            "ServiceId": serviceId,
            "Environment": environment
        }
        if apiIds:
            params.update({"ApiIds": apiIds})
        common_client = self.getCommonClient(service="apigateway", region=region)
        result = common_client.call_json("UnBindEnvironment", params=params)
        return result["Response"]["Result"]

    def getCommonClient(self, region: str, service=None, apiVersion=None, cred=None) -> CommonClient:
        """
        返回适用于region地域的CommonClient对象

        :param region: 地域信息
        :param service: 产品名
        :param apiVersion: API版本信息
        :param cred: 接口认证信息
        :return:
        """
        if service is None:
            service = self._service
        if apiVersion is None:
            apiVersion = self.getApiVersion(service=service)
        if cred is None:
            cred = self.cred
        return CommonClient(service, apiVersion, cred, region,
                            profile=self.clientProfile(service=service, region=region))

    def deployFunction(self, region):
        """
        部署函数

        :param region: 地域信息
        :return: 云函数触发器信息
        """
        trigger = None
        if self.functionExist(functionName=self.functionName, region=region):
            console.info("用户 [blue]{user}[/blue] [green]{0}[/green] 地区已存在函数 [cyan]{1}[/cyan],"
                         "正在更新函数代码...".format(region, self.functionName, user=self._cloudUser))
            result = self.updateFunctionCode(functionName=self.functionName, region=region)
            if result:
                trigger = self.getTriggers(functions=self.functionName, region=region)
        else:
            console.info("用户 [blue]{user}[/blue] [green]{0}[/green] 地区未创建函数 [cyan]{1}[/cyan],"
                         "正在创建新函数...".format(region, self.functionName, user=self._cloudUser))
            result = self.createFunction(functionName=self.functionName, region=region)
            if result:
                version = "$DEFAULT"
                if self._provisioned:
                    funVersion = self.publishVersion(functionName=self.functionName,
                                                     region=region,
                                                     desc="预置并发版本发布")
                    version = funVersion["FunctionVersion"]
                    with console.rConsole.status(formatString("等待 [green]{0}[/green]"
                                                              " 地区函数完成版本发布...".format(region)),
                                                 spinner="point"):
                        vStatus = None
                        while vStatus is None:
                            versionOfFun = self.getVersionOfFunction(functionName=self.functionName,
                                                                     region=region,
                                                                     version=version)
                            status = self.getVersionStatusOfFunction(versionOfFun, version)
                            if status == "Active":
                                vStatus = status
                            time.sleep(0.01)
                    console.info("已发布函数到 [green]{0}[/green] 地区, Version：{1} CodeSize：{2} MemorySize: {3}"
                                 .format(region,
                                         funVersion["FunctionVersion"],
                                         funVersion["CodeSize"],
                                         funVersion["MemorySize"]))

                    # 配置预置并发
                    available, reason = self.checkAvailableProvision(functionName=self.functionName,
                                                                     region=region, qualifier=version)
                    if not available:
                        console.warning("无法为 [green]{0}[/green] 地区函数配置预置并发, 原因: {1}", region, reason)
                    else:
                        putProvision = self.putProvisionedConcurrencyConfig(functionName=self.functionName,
                                                                            region=region, qualifier=version)
                        self.putReservedConcurrencyConfig(functionName=self.functionName,
                                                          region=region)
                        if putProvision:
                            with console.rConsole.status(formatString("正在为 [green]{0}[/green]"
                                                                      " 地区函数配置预置并发...".format(region)),
                                                         spinner="point"):
                                status = None
                                while status is None:
                                    putProvisionStatus = self.getProvisionedConcurrencyConfig(
                                        functionName=self.functionName,
                                        region=region, qualifier=version)
                                    currentPutProvisionStatus = [allocated["Status"]
                                                                 for allocated in putProvisionStatus["Allocated"]
                                                                 if allocated["Qualifier"] == version]
                                    if "Done" in currentPutProvisionStatus:
                                        status = "Done"
                                    time.sleep(0.01)
                console.info("为用户 [blue]{user}[/blue] [green]{0}[/green] 地区创建云函数"
                             " [cyan]{1}[/cyan] 完成,正在部署并创建触发器..."
                             .format(region, self.functionName, user=self._cloudUser))
                trigger = self.createTrigger(self.functionName,  # 为函数创建触发器
                                             region,
                                             functionVersion=version)
        return trigger

    def deploySignRight(self, function, trigger, region):
        """
        为函数绑定使用计划，配置签权

        :param function: 函数信息
        :param trigger: 函数触发器信息
        :param region: 地域信息
        :return: 使用计划和认证key
        """
        triggerDesc = json.loads(trigger["TriggerDesc"])
        # 从缓存获取或者是重新创建密钥信息
        if not function[region]:
            api_keys = self.getApiKeys(region=region)  # 获取或者创建秘钥信息
        else:
            if "accessKeys" in function[region][0] and function[region][0]["accessKeys"]:
                api_keys = function[region][0]["accessKeys"]  # 从缓存中获取秘钥信息
            else:
                api_keys = self.getApiKeys(region=region)  # 获取或者创建秘钥信息

        use_plan = self.getUsePlanOfFunction(function=function, region=region)  # 从缓存获取或者重新创建使用计划
        # 获取使用计划详情
        if "usePlanInfo" not in use_plan:
            use_plan_info = self.getUsePlanInfo(use_plan, region=region)
            use_plan.update({"usePlanInfo": use_plan_info})
        else:
            use_plan_info = use_plan["usePlanInfo"]
        # 验证秘钥对是否绑定该使用计划
        if api_keys["AccessKeyId"] not in use_plan_info["BindSecretIds"]:
            # 使用计划未绑定当前密钥信息
            result = self.bindSecretIds(usePlan=use_plan_info, api_keys=api_keys, region=region)
            if result:
                console.debug("已为使用计划 [yellow]{0}[/yellow] 绑定密钥对.".format(use_plan_info["UsagePlanId"]))
        # 检查当前API网关触发器serviceId是否在使用计划的BindEnvironments列表中
        if not [triggerDesc["service"]["serviceId"] for bindEnv in use_plan_info["BindEnvironments"]
                if triggerDesc["service"]["serviceId"] == bindEnv["ServiceId"]]:
            # 为使用计划绑定服务
            result = self.bindEnvironment(usePlan=use_plan_info, trigger=trigger, region=region)
            # 绑定完后更新使用计划信息到use_plan,防止第一次创建函数时候usePlanInfo的绑定信息为空
            use_plan_info = self.getUsePlanInfo(use_plan, region=region)
            use_plan.update({"usePlanInfo": use_plan_info})
            if result:
                console.debug("已为使用计划 [yellow]{0}[/yellow] 绑定服务 [red]{1}[/red]"
                              .format(use_plan_info["UsagePlanId"], triggerDesc["service"]["serviceId"]))
        console.info("[green]{0}[/green] 地区签权部署完成.已绑定使用计划 [yellow]{1}[/yellow] 到服务 [red]{2}[/red]"
                     .format(region, use_plan["UsagePlanId"], triggerDesc["service"]["serviceId"]))
        return use_plan, api_keys

    def createFunction(self, functionName, region):
        """
        创建云函数并为函数创建触发器

        :param functionName: 函数名称
        :param region: 地域信息
        :return: 云函数触发器信息
        """
        # 删除已创建的函数再重建
        if self.functionExist(functionName=functionName, region=region):
            console.debug("用户 [blue]{user}[/blue] [green]{0}[/green] 地区已存在函数 [cyan]{1}[/cyan],"
                          "正在删除并重建该函数...".format(region, functionName, user=self._cloudUser))
            with console.rConsole.status(formatString("等待函数删除完成..."), spinner="point"):
                funInfo = None
                while funInfo is not False:  # 循环等待直到函数完成删除操作
                    funInfo = self.functionExist(functionName=functionName, region=region)
                    if funInfo and funInfo["Status"] != "Deleting":
                        self.deleteFunction(functionName=functionName, region=region)
                    time.sleep(0.01)
        params = self.getFunctionParams(functionName=functionName)
        common_client = self.getCommonClient(region=region)
        result = common_client.call_json("CreateFunction", params=params)
        return result

    def publishVersion(self, functionName, region, desc="自动版本发布"):
        """
        发布函数版本

        :param functionName: 函数名称
        :param region: 地域信息
        :param desc: 版本描述
        :return: str 函数版本信息
        """
        # 检查函数状态
        with console.rConsole.status(formatString("等待函数创建完成..."), spinner="point"):
            functionStatus = None
            while functionStatus is None:
                funInfo = self.getFunction(functionName=functionName, region=region, show_code=False)
                Status = funInfo["Response"]["Status"]
                if Status == "Active":
                    functionStatus = "Active"
                if "Failed" in Status:
                    raise ExpDeposCloudFunctionException("函数 [cyan]{0}[/cyan] 不可用, 无法为其发布新版本!".format(functionName))
                time.sleep(0.01)
        params = {
            "FunctionName": functionName,
            "Description": desc
        }
        common_client = self.getCommonClient(region=region)
        result = common_client.call_json("PublishVersion", params=params)
        return result["Response"]

    def getProvisionedConcurrencyConfig(self, functionName, region, qualifier=None):
        """
        获取函数预置并发详情

        :param functionName: 函数名称
        :param region: 地域信息
        :param qualifier: 函数版本信息
        :return:
        """
        params = {
            "FunctionName": functionName,
        }
        if qualifier:
            params.update({"Qualifier": qualifier})
        common_client = self.getCommonClient(region=region)
        result = common_client.call_json("GetProvisionedConcurrencyConfig", params=params)
        return result["Response"]

    def putProvisionedConcurrencyConfig(self, functionName, region, qualifier):
        """
        为函数设置预置并发

        :param functionName: 函数名称
        :param region: 地域信息
        :param qualifier: 函数版本
        :return:
        """
        # 金融地区可配置预制并发数最多为50
        provisionedNum = self._provisionedNumber
        if "fsi" in region:
            provisionedNum = self._provisionedNumber if self._provisionedNumber < 50 else 50
        params = {
            "FunctionName": functionName,
            "Qualifier": qualifier,
            "VersionProvisionedConcurrencyNum": provisionedNum
        }
        common_client = self.getCommonClient(region=region)
        result = common_client.call_json("PutProvisionedConcurrencyConfig", params=params)
        return result

    def putReservedConcurrencyConfig(self, functionName, region):
        """
        为函数设置保留并发

        :param functionName:
        :param region:
        :return:
        """
        provisionedNum = self._provisionedNumber
        if "fsi" in region:
            provisionedNum = self._provisionedNumber if self._provisionedNumber < 50 else 50
        params = {
            "FunctionName": functionName,
            "ReservedConcurrencyMem": provisionedNum * 128
        }
        common_client = self.getCommonClient(region=region)
        return common_client.call_json("PutReservedConcurrencyConfig", params=params)

    def updateFunctionCode(self, functionName, region):
        """
        更新函数代码

        :param functionName: 函数名
        :param region: 地域信息
        :return: bool
        """
        params = {
            "FunctionName": functionName,
            "Code": {"ZipFile": self.code}
        }
        common_client = self.getCommonClient(region=region)
        result = common_client.call_json("UpdateFunctionCode", params=params)
        return result

    def deleteFunction(self, functionName, region):
        """
        删除云函数

        :param functionName: 函数名称
        :param region: 地域信息
        :return:
        """
        common_client = self.getCommonClient(region=region)
        result = common_client.call_json("DeleteFunction", params={"FunctionName": functionName})
        # 删除函数对应的API网关服务
        triggers = self.getTriggers(functions=functionName, region=region)
        for trigger in triggers:
            triggerDesc = json.loads(trigger["TriggerDesc"])
            serviceId = triggerDesc["service"]["serviceId"]
            with console.rConsole.status(formatString("等待函数从服务 [red]{0}[/red] 中移除...").format(serviceId),
                                         spinner="point"):
                AvailableEnvironments = [None]  # 循环等待直到服务下已发布环境被移除
                while len(AvailableEnvironments) != 0:
                    serviceInfo = self.DescribeService(serviceId=serviceId, region=region)
                    AvailableEnvironments = serviceInfo["Response"]["AvailableEnvironments"]
                    time.sleep(0.01)
            # 解除使用计划绑定
            usePlanList = serviceInfo["Response"]["UsagePlanList"]
            if usePlanList:
                for usePlan in usePlanList:
                    unBind = self.unbindEnvironment(usePlan=usePlan["UsagePlanId"],
                                                    serviceId=serviceId,
                                                    bindType="SERVICE",
                                                    environment=usePlan["Environment"],
                                                    region=region)
                    if unBind:
                        console.debug("从使用计划 [yellow]{0}[/yellow] 中解绑服务 [red]{1}[/red]"
                                      .format(usePlan["UsagePlanId"], serviceId))
            result = self.deleteService(serviceId=serviceId, region=region)
        return result

    def deleteService(self, serviceId, region):
        """
        删除函数对应API网关服务

        :param serviceId: 服务Id值
        :param region: 地域信息
        :return:
        """
        common_client = self.getCommonClient(service="apigateway", region=region)
        return common_client.call_json("DeleteService", params={"ServiceId": serviceId})

    def deleteApi(self, apiId, serviceId, region):
        """
        删除函数对应API网关服务下的API

        :param apiId: apiId值
        :param serviceId: 服务Id值
        :param region: 地域信息
        :return:
        """
        params = {
            "ServiceId": serviceId,
            "ApiId": apiId
        }
        common_client = self.getCommonClient(service="apigateway", region=region)
        return common_client.call_json("DeleteApi", params=params)

    def createTrigger(self, functionName, region, functionVersion="$DEFAULT"):
        """
        为云函数创建触发器

        :param functionName: 创建的云函数名称
        :param region: 地域信息
        :param functionVersion: 函数版本信息
        :return: trigger info
        """
        with console.rConsole.status(formatString("等待函数创建完成..."), spinner="point"):
            functionInfo = self.getFunction(functionName, region=region)
            while functionInfo["Response"]["Status"] != "Active":
                functionInfo = self.getFunction(functionName, region=region)
                if functionInfo["Response"]["Status"] == "CreateFailed":
                    raise ExpDeposCloudFunctionException("用户 [blue]{user}[/blue] [green]{0}[/green] "
                                                         "地区函数部署失败，无法为该函数创建触发器，请重新部署函数再试，原因：{1} "
                                                         .format(region, functionInfo["Response"]["StatusReasons"],
                                                                 user=self._cloudUser))
                time.sleep(0.01)
        params = self.getTriggerParams(functionName=functionName, functionVersion=functionVersion)
        common_client = self.getCommonClient(region)
        with console.rConsole.status(formatString("等待触发器创建完成..."), spinner="point"):
            loop = 1
            trigger = None
            while trigger is None:
                if loop == 1:
                    trigger = common_client.call_json("CreateTrigger", params=params)
                loop += 1
        if trigger:
            triggerDesc = json.loads(trigger["Response"]["TriggerInfo"]["TriggerDesc"])
            console.debug("为 [cyan]{0}[/cyan] 创建触发器完成: {1}".format(functionName,
                                                                   {"serviceId": triggerDesc["service"]["serviceId"]}))
            return trigger["Response"]["TriggerInfo"]
        return None

    def functionExist(self, functionName, region):
        """
        检查函数是否已经创建

        :param functionName: 函数名
        :param region: 地域信息
        :return: bool
        """
        try:
            functionInfo = self.getFunction(functionName=functionName, region=region)
            if functionInfo["Response"]["FunctionName"] == functionName:
                return functionInfo["Response"]
            else:
                return False
        except TencentCloudSDKException as e:
            if "未找到指定的Function" in repr(e):
                return False
        return True

    def codeZip2B64str(self, codeZip):
        """
        base64编码源码包

        :param codeZip:
        :return:
        """
        if self._code:
            return self._code
        if not os.path.exists(codeZip):
            codeZip = self.codePackage()
        with open(codeZip, 'rb') as codeZipFile:
            file_data = codeZipFile.read()
        b64Str = base64.b64encode(file_data).decode()
        self._code = b64Str
        return b64Str

    def codePackage(self):
        """
        打包src目录下的源文件

        :return: str 打包后的压缩文件路径
        """
        filePath = os.path.abspath(self.codeDir + '../src_build.zip')
        if os.path.exists(filePath):
            os.remove(filePath)
        with zipfile.ZipFile(filePath, mode="w") as codeZip:
            for file in os.listdir(self.codeDir):
                with open(self.codeDir + file, 'rb') as codeFile:
                    file_data = codeFile.read()
                codeZip.writestr(file, data=file_data)
        return filePath

    def checkUnavailable(self, functions) -> list:
        """
        函数校验

        :param functions: 需要校验的函数或者函数列表
        :return: list 含有未校验通过的函数地域信息列表
        """
        if isinstance(functions, list):
            unavailable = list()
            for function in functions:
                unavailableFun = self.checkUnavailable(function)
                unavailable.extend(unavailableFun)
            return unavailable
        # 需要验证的函数应是个列表{"region":["function"]}或是{"region":{functionInfo}}
        if not isinstance(functions, dict):
            raise ExpDeposCloudFunctionException("需要验证的函数参数格式错误,此次应提供dict类型.")
        region = list(functions.keys())  # 取出函数地域信息值进一步验证地域正确性
        if not region:
            raise ExpDeposCloudFunctionException("需要验证的函数地区错误,地区信息为空.")
        if region[0] not in self.regions:
            raise ExpDeposCloudFunctionException("需要验证的函数地区错误,无法找到该地区：[green]{0}[/green]".format(region))
        functionInfo = functions[region[0]]
        if not functionInfo:  # 验证函数信息为空则返回函数所在地域信息
            return [region[0]]
        if not self.checkVersion(functionInfo[0], region[0]):  # 验证函数版本
            return [region[0]]
        return []

    def checkVersion(self, functionInfo: dict, region) -> bool:
        """
        验证函数版本信息

        :param functionInfo: 函数信息
        :param region: 地域信息
        :return: bool
        """
        if "codeHash" not in functionInfo:  # 传入值为已创建的线上函数信息
            funInfo = self.getFunction(functionName=functionInfo["name"], region=region)  # 获取线上函数详细信息
            funCode = funInfo["Response"]["CodeInfo"]  # 获取函数代码
            funCode_hash = hashlib.md5(bytes(funCode, encoding="UTF-8")).hexdigest()  # 计算线上函数代码hash值
            return self.codeHash == funCode_hash
        else:
            return self.codeHash == functionInfo["codeHash"]

    def checkAvailableProvision(self, functionName, region, qualifier):
        """
        检查函数是否可设置预置并发

        :param functionName: 函数名称
        :param region: 地域信息
        :param qualifier 函数版本号
        :return: bool
        """
        available = True
        reason = ''
        provisioned = self.getProvisionedConcurrencyConfig(functionName=functionName,
                                                           region=region, qualifier=qualifier)
        if provisioned["UnallocatedConcurrencyNum"] < self._provisionedNumber:
            reason = "该函数剩余可配置的预置并发数({0})不够设置并发数({1})".format(provisioned["UnallocatedConcurrencyNum"],
                                                              self._provisionedNumber)
            # 金融地区预置并发默认50，这里返回True 然后在配置并发的时候根据根据设定值和剩余可配置并发数灵活设置
            return True, reason
        for allocated in provisioned["Allocated"]:
            if allocated["Qualifier"] == qualifier:
                reason = "当前版本 {0} 已配置 {1}个预置并发.".format(qualifier, provisioned["AvailableProvisionedConcurrencyNum"])
                return False, reason
        return available, reason

    def setCache(self):
        """
        缓存函数信息

        :return:
        """
        scfConfigs = self.getCache()
        currentConfig = {"scf": {self._cloudUser: {self._cloudType: self.api_gateways}}
                         }
        # 不能直接使用scfConfigs.update 存在相同的键值的情况下后者会直接覆盖之前的值而不是添加不同值到对应位置
        if "scf" in scfConfigs:
            scfConfigs["scf"].update(currentConfig["scf"])
        else:
            scfConfigs = currentConfig
        with open(self.cache_dir + 'scfConfigs.json', "w") as cacheFile:
            return cacheFile.write(json.dumps(scfConfigs))

    def getCache(self):
        """
        获取缓存信息

        :return: dict
        """
        scfConfigs = dict()
        if os.path.exists(self.cache_dir + 'scfConfigs.json'):
            with open(self.cache_dir + 'scfConfigs.json', "r", encoding="UTF-8") as cacheFile:
                try:
                    scfConfigs = json.loads(cacheFile.read())
                except JSONDecodeError:
                    scfConfigs = scfConfigs
        return scfConfigs

    def getFunCache(self):
        """
        从缓存文件中获取函数信息

        :return: list
        """
        cacheFunctions = self.getCache()
        if cacheFunctions:
            try:
                functions = list(cacheFunctions["scf"][self._cloudUser][self._cloudType])
            except KeyError:  # 找不到对应键值是直接返回None
                return None
            # 检查下地域信息是否都含有当前云函数支持的地域
            if functions:
                funRegions = list()
                for fun in functions:
                    funRegions.extend(fun.keys())
                for region in self.regions:
                    if region not in funRegions:
                        functions.append({region: []})
            return functions
        return None

    def deleteCache(self):
        """
        删除缓存

        :return: bool
        """
        if os.path.exists(self.cache_dir + 'scfConfigs.json'):
            return os.unlink(self.cache_dir + 'scfConfigs.json')
        return False

    def clearAll(self):
        """
        清除所有地区的云函数

        :return:
        """
        for region in self.regions:
            try:
                # 删除函数
                if self.functionExist(functionName=self.functionName, region=region):
                    self.deleteFunction(functionName=self.functionName, region=region)
                    console.debug(
                        "已删除用户 [blue]{user}[/blue] [green]{0}[/green]地区部署的云函数...".format(region, user=self._cloudUser))
                # 删除服务
                services = self.DescribeServiceList(region=region)
                for service in services:
                    serviceId = service["ServiceId"]
                    serviceInfo = self.DescribeService(serviceId=serviceId, region=region)
                    # 解除使用计划绑定
                    usePlanList = serviceInfo["Response"]["UsagePlanList"]
                    if usePlanList:
                        for usePlan in usePlanList:
                            unBind = self.unbindEnvironment(usePlan=usePlan["UsagePlanId"],
                                                            serviceId=serviceId,
                                                            bindType="SERVICE",
                                                            environment=usePlan["Environment"],
                                                            region=region)
                            if unBind:
                                console.debug("从使用计划 [yellow]{0}[/yellow] 中解绑服务 [red]{1}[/red]"
                                              .format(usePlan["UsagePlanId"], serviceId))
                    with console.rConsole.status(formatString("等待服务 [red]{0}[/red]"
                                                              " 绑定的使用计划解绑完成...").format(serviceId),
                                                 spinner="point"):
                        while usePlanList:
                            serviceInfo = self.DescribeService(serviceId=serviceId, region=region)
                            usePlanList = serviceInfo["Response"]["UsagePlanList"]
                            time.sleep(0.01)
                    self.deleteService(serviceId=service["ServiceId"], region=region)
                    console.debug("已删除[green]{region}[/green]地区服务 [yellow]{0}[/yellow]"
                                  .format(service["ServiceId"], region=region))
                # 删除缓存
            except TencentCloudSDKException as e:
                console.exception(repr(e))
                continue
        self.deleteCache()
