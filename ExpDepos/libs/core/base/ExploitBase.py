#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/3/8 16:22
"""

import asyncio
from ExpDepos.libs.core.base.ExceptionBase import *
from ExpDepos.libs.core.base.OptionsBase import *
from ExpDepos.libs.core.common.Common import *
from ExpDepos.libs.core.common.Result import Result
from ExpDepos.libs.core.TencentCloudFunction import TencentScf
import ExpDepos.libs.core.Request as Request


class ExploitBase(object):
    """
    Exp基类，用于定义每个exp默认方法及规则
    """
    NAME = None  # Exp名称
    APP_NAME = None  # 漏洞应用名称
    APP_VERSION = None  # 漏洞对应版本，版本区间中间使用"-"符号连接
    VERSION = 1  # 版本号，默认1
    SPEC = None  # 模块SPEC，无需自定义，加载时候自动设置

    def __init__(self):
        # 用于存储EXP额外选项
        self.OPTIONS = dict()
        self.OPTIONS["HOST"] = OptHost(None, description="目标地址 (可选IP端口或URL地址)", require=True)
        if hasattr(self, "_options") \
                and len(self._options()) > 0:
            # 将用户自定义选项名全部转换为小写，以便在命令行使用-P或者--options选项传入
            self.OPTIONS.update({key.lower(): value for key, value in self._options().items()})
        # 目标指纹信息
        self.FINGERPRINT = None

        self.opt_parse = None  # 使用argparse.ArgumentParser解析的模块参数对象
        self.requireOpts = None  # 模块用户自定义的必须参数
        self.result = None  # 模块执行结果
        self.request = None  # HTTP同步请求接口
        self.asyncRequest = None  # HTTP异步请求接口

    def fingerprint(self):
        """
        @function   识别目标指纹信息
        :return:    指纹信息实例
        """
        raise NotImplementedError

    def help(self):
        """
        @function   显示用户自定义参数帮助信息
        :return:
        """
        console.info("{0} 模块参数帮助.".format(self.Name))
        options = self._options()
        if len(options) == 0:
            console.info("模块 {0} 暂无用户自定义参数信息.")
        console.debug("获取模块 {0} 用户自定义选项信息 {1}".format(self.Name, options.keys()))
        self.opt_parse = self.get_parse(options)
        console.print("")
        self.opt_parse.print_help()

    def get_parse(self, options):
        """
        根据模块用户自定义的选项信息生成 argparse.ArgumentParser 对象
        :param options: 模块用户自定义选项列表
        :return: argparse.ArgumentParser
        """
        opt_parse = argparse.ArgumentParser(prog=self.SPEC, conflict_handler='resolve', add_help=False,
                                            usage="ExpDepos -H host -M {0} [-p,--options] [Module Options]"
                                            .format(format_module(self.SPEC)))
        module_opt_group = opt_parse.add_argument_group("Module Options")
        for key in options.keys():
            module_opt_group.add_argument("--" + key.lower(),
                                          help=options[key].description,
                                          required=options[key].require)

        return opt_parse

    def parse_options(self, source):
        """
        解析模块必选参数
        :param source: 命令行提交的-P或者--options选项值
        :return: argparse 解析参数后的Namespace
        """
        # 当必选项大于0且用户为设置任何选项值的时候抛出错误
        if source is None and len(self.get_requireOpts()) > 0:
            raise ExploitValidationException("模块缺少必要参数 {0}. 请使用[bold cyan]-P[/bold cyan]"
                                             "或者[bold cyan]--options[/bold cyan]选项提供."
                                             .format(self.get_requireOpts()))
        if not self.opt_parse:
            self.opt_parse = self.get_parse(self._options())
        if source is not None:
            return self.opt_parse.parse_args(source.split())
        else:
            return None

    def get_options(self):
        """
        返回当前OPTIONS键值对应的列表
        :return: dic
        """
        return {key: val.value for key, val in self.OPTIONS.items()}

    def set_option(self, key, value):
        """
        设置模块用户自定义参数值
        :param key: 用户自定义参数名
        :param value: 用户自定义参数值
        :return:
        """
        if key not in self.OPTIONS:
            raise ExploitAttribException("无法找到选项 {} 请确认该选项是否存在".format(key))
        self.OPTIONS[key].__set__("", value)

    def get_option(self, key):
        """
        返回模块用户自定义参数值
        :param key: 需要获取的参数名
        :return: 参数名对应值
        """
        if key not in self.OPTIONS:
            raise ExploitAttribException("无法找到选项 '{}' 请确认选项是否配置".format(key))
        return self.OPTIONS[key].value

    def get_requireOpts(self):
        """
        获取当前模块必选参数
        :return: list 必选参数列表
        """
        if self.requireOpts is None:
            self.requireOpts = [key.lower() for key in self._options().keys()
                                if self.OPTIONS[key.lower()].require is True and not self.get_option(key)]
        return self.requireOpts

    def _options(self):
        """
        @function   Exploit模块选项设置
        :return:
        """
        raise NotImplementedError

    def _verify(self):
        """
        @function   以exp的verify模式验证目标漏洞是否存在并返回
        :return:    Response
        """
        raise NotImplementedError

    def _exploit(self):
        """
        @function   以exp的exploit模式进行漏洞检测利用并返回
        :return:    Response
        """
        raise NotImplementedError

    def _clean(self):
        """
        @function   日志清理
        :return:    Response
        """
        raise NotImplementedError

    async def aCloser(self):
        """
        关闭异步请求接口

        :return:
        """
        await self.asyncRequest.aclose()

    def scfInit(self, CloudFunctions):
        """
        初始化云函数

        :param CloudFunctions: 云函数配置信息
        :return:
        """
        configs = scfInit(CloudFunctions)
        self.request.scfCfg = self.asyncRequest.scfCfg = configs

    def run(self, options, mode="Verify"):
        """
        Exploit模块调用入口
        :param options: 命令行参数信息及模块参数信息
        :param mode: 利用模式(exploit)或者验证模式(verify)
        :return:
        """
        console.info("正在以 '{0}' 模式运行模块 '{1}'".format(mode, self.Name))
        self.result = Result(self)  # 初始化执行结果
        if not self.get_option("HOST"):
            self.result.fail("目标地址未设置.")
            raise ExploitValidationException("[red1]请设置目标地址(可选IP端口或URL地址)[/red1]")

        self.request = Request.instance(options)  # 初始化HTTP同步请求对象Request
        self.asyncRequest = Request.instance(options, isSync=True)  # 初始化HTTP异步请求对象asyncRequest
        if options.useScf:
            self.scfInit(env.Config.CloudFunctions)
        try:
            if mode.lower() == "verify":
                self._verify()
            else:
                self._exploit()
        finally:
            self.request.close()
            asyncio.run(self.aCloser())
