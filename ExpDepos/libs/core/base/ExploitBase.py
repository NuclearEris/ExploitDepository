#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/3/8 16:22
"""

from ExpDepos.libs.core.common.Common import *
from ExpDepos.libs.core.base.OptionsBase import *
from ExpDepos.libs.core.base.ExceptionBase import *


class ExploitBase(object):
    """
    Exp基类，用于定义每个exp默认方法及规则
    """
    NAME = None  # Exp名称
    APP_NAME = None  # 漏洞应用名称
    APP_VERSION = None  # 漏洞对应版本，版本区间中间使用"-"符号连接
    VERSION = 1  # 版本号，默认1

    def __init__(self):
        # 用于存储EXP额外选项
        self.OPTIONS = dict()
        self.OPTIONS["Target"] = None
        if hasattr(self, "_options") \
                and len(self._options()) > 0:
            self.OPTIONS.update(self._options())
        # 目标指纹信息
        self.FINGERPRINT = None

    def fingerprint(self):
        """
        @function   识别目标指纹信息
        :return:    指纹信息实例
        """
        raise NotImplementedError

    def set_option(self, key, value):
        if key not in self.OPTIONS:
            raise ExpDeposValidationException("无法找到选项 {} 请确认该选项是否存在".format(key))
        self.OPTIONS[key].__set__("", value)

    def get_option(self, key):
        if key not in self.OPTIONS:
            raise ExpDeposValidationException("无法找到选项 '{}' 请确认选项是否配置".format(key))
        return self.OPTIONS[key].value

    def _options(self):
        """
        @function   Exploit模块选项设置
        :return:
        """
        raise NotImplementedError

    def _verify(self):
        """
        @function   以exp的verify模式验证目标漏洞是否存在并返回
        :return:    Response
        """
        raise NotImplementedError

    def _exploit(self):
        """
        @function   以exp的exploit模式进行漏洞检测利用并返回
        :return:    Response
        """
        raise NotImplementedError

    def _clean(self):
        """
        @function   日志清理
        :return:    Response
        """
        raise NotImplementedError

    def run(self, Module="Verify"):
        """
        @function   调用入口
        :return:
        """
        # console.debug("Option username is :{}".format(self.get_option("UserName")))
        # if self.OPTIONS["Target"] is None:
        #     console.debug("Test [bold red]debug[/]", "This debug message")
        #     console.info("Test info")
        #     console.success("Test success")
        #     console.failed("Test failed")
        #     console.warning("Test warning")
        #     console.error("Test error")
        #     try:
        #         print(1 / 0)
        #     except Exception as e:
        #         console.exception(repr(e))
        #     return False
