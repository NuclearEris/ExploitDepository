#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/3/8 16:22
"""

import asyncio
import traceback
import ExpDepos.libs.core.Request as Request
import ExpDepos.libs.core.Response as Response
from ExpDepos.libs.core.ModuleLoader import ModuleLoader
from ExpDepos.libs.core.base.ModuleBase import *
from ExpDepos.libs.core.base.ExceptionBase import *
from ExpDepos.libs.core.base.PayloadBase import PayloadBase
from ExpDepos.libs.core.common.Result import Result
from ExpDepos.libs.core.base.Fingerprint import Fingerprint, register, instanceFingerprint, availableFilters


class ExploitBase(ModuleBase):
    """
    Exp基类，用于定义每个exp默认方法及规则
    """

    def __init__(self):
        super(ExploitBase, self).__init__()
        # 初始化 host 参数 防止与用户自定义参数冲突
        self.OPTIONS.update({'host': OptString("", description="目标地址 (可选IP端口或URL地址)", require=False)})
        self.OPTIONS.update({'payload': OptPayload("", description="Exploit模块有效攻击载荷", require=False)})
        self.result = None  # 模块执行结果
        self.request = None  # HTTP同步请求接口
        self.asyncRequest = None  # HTTP异步请求接口

    @property
    def fingerprint(self) -> any:
        """
        识别目标指纹信息

        :return:    指纹信息实例
        """
        fp = None
        try:
            fp = self._fingers()
        except NotImplementedError:
            console.warning("[green]{0}[/green] 未实现指纹识别功能, 请重载[magenta3]_fingers()[/magenta3]方法."
                            .format(self.Name))
            return None
        if fp:
            fp.update({"regByExp": self.SPEC})
            register(fp)
            return instanceFingerprint(fp)
        return None

    def _options(self):
        return super()._options()

    @property
    def payload(self) -> PayloadBase:
        """
        payload 信息

        :return:
        """
        try:
            payload = self.get_option("payload")
        except ExploitAttribException as e:
            raise ExploitValidationException(repr(e))
        if not payload:
            raise ExploitValidationException("模块 {0} 需要配置有效攻击载荷.".format(self.Name))
        return self.getPayload(payload)

    def getPayload(self, payload) -> PayloadBase:
        """
        从已加载的模块中获取payload模块

        :param payload:
        :return:
        """
        payload_info = ModuleLoader.get_loaded_module(payload)
        if not payload_info:
            raise ExploitValidationException("无效的payload: {0}".format(payload))
        return payload_info["module"]

    def payloadInit(self, options):
        """
        payload初始化

        :param options: payload参数信息
        :return:
        """
        # 设置Payload
        payload_info = ModuleLoader.get_loaded_module(options.payload)
        if not payload_info:
            raise ExploitValidationException("无效的payload: {0}".format(options.payload))
        console.info("为模块 [bright_magenta]{0}[/bright_magenta] 应用攻击载荷: [bold yellow]{1}[/bold yellow]"
                     .format(self.Name, payload_info["Name"]))
        self.add_payload(payload_info["Alias"])  # 添加payload
        payload_obj = payload_info["module"]
        if options.payload_opts:
            payload_options = payload_obj.parse_options(options.payload_opts)
            if payload_options:
                console.debug("解析到Payload参数：{0}".format(payload_options))
            else:
                raise ExpDeposExploitException("Payload 参数解析失败: {0}".format(options.payload_opts))
            ModuleLoader.set_module_opts(payload_obj, payload_options)
        # 设置Encoder
        if options.encode:
            encode_info = ModuleLoader.get_loaded_module(options.encode)
            if not encode_info:
                raise ExploitValidationException("无效的encoder: {0}".format(options.encode))
            payload_obj.add_encoder(encode_info['Alias'])
            encode_obj = encode_info["module"]
            if options.encode_opts:
                encode_options = encode_obj.parse_options(options.encode_opts)
                if encode_options:
                    console.debug("解析到Encoder参数: {0}".format(encode_options))
                else:
                    raise ExpDeposExploitException("Encoder 参数解析失败: {0}".format(options.payload_opts))
                ModuleLoader.set_module_opts(encode_obj, encode_options)

    def fpMatches(self, response: Response, mode="ALL", host="", fp_filter={}, progress=None) -> list:
        """
        指纹识别

        :param response: Response 对象
        :param mode: 识别模式 可选ALL、PASS, AGGR, EXP
        :@param host: 指定特定的host
        :param fp_filter: 指纹过滤器 用于过滤包含指定过滤器的指纹
        :@param progress: 进度条对象
        :return: list
        """
        loop = None
        try:
            loop = asyncio.get_event_loop()
        except RuntimeError as e:
            if "There is no current event loop in thread" in str(e):
                loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        return asyncio.get_event_loop().run_until_complete(self.asyncFpMatches(response=response,
                                                                               mode=mode,
                                                                               fpFilter=fp_filter))

    async def asyncFpMatches(self, response: Response, mode="ALL", host="", fp_filter={}, progress=None) -> list:
        """
        并发指纹识别

        :param response: Response 对象
        :param mode: 识别模式 可选ALL、PASS, AGGR, EXP
        :@param host: 指定特定的host
        :param fp_filter: 指纹过滤器 用于过滤包含指定过滤条件的指纹
        :@param progress: 进度条对象
        :return: list
        """
        sem = asyncio.Semaphore(env.CliOptions.thread)

        async def aw_task(aw):
            async with sem:
                return await aw

        # if not self.asyncRequest.useScf:
        #     console.warning("[yellow]当前未使用云函数代理请求, 建议开启云函数功能对抗WAF等相关安全产品.[/yellow]")
        task_list = list()
        request = Request.instance(env.CliOptions, isSync=True)  # 新建request对象，兼容在子线程中调用
        if progress:
            request.set_progress(progress)
        for fingerprint in env.fps:
            # 过滤器过滤不符合条件的指纹
            if fp_filter and not self.fingerFilter(fingerprint, availableFilters(fp_filter)):
                continue
            matches = fingerprint.asyncMatches(asyncRequestObj=request,
                                               responseObj=response, mode=mode, host=host)
            if sys.version_info < (3, 7):
                task = asyncio.ensure_future(aw_task(matches))
            else:
                task = asyncio.create_task(aw_task(matches))
            task_list.append(task)
        result = await asyncio.gather(*task_list)
        return [match for match in result if match["matches"]]

    def fingerFilter(self, fp: Fingerprint, fp_filter={}):
        """
        根据指纹过滤器过滤指纹

        @param fp: 指纹对象
        @type fp: Fingerprint
        @param fp_filter: 用户自定义的过滤信息
        @type fp_filter: dict
        @return: 该指纹是否满足过滤条件
        @rtype: boolean
        """
        for fileter_type, fileter_values in fp_filter.items():
            if fileter_type == 'type' and not self.match_type_fileter(fp, fp_filter):
                return False
            if fileter_type in fp.filters:
                match_values = fp.filters.get(fileter_type)
                if not isinstance(match_values, list):
                    match_values = [match_values]
                is_match_fileter = [fileter_value for fileter_value in fileter_values
                                    if fileter_value.lower() in [match_value.lower() for match_value in match_values]]
                if not is_match_fileter:
                    return False
        return True

    def match_type_fileter(self, fp: Fingerprint, fp_fileter):
        """
        根据指纹类型过滤指纹

        @param fp: 指纹对象
        @type fp: Fingerprint
        @param fp_fileter: 用户自定义的过滤信息
        @type fp_fileter: dict
        @return: 该指纹是否满足过滤条件
        @rtype: boolean
        """
        if "type" not in fp_fileter:
            return False
        matches = fp_fileter.get("type")
        if not isinstance(matches, list):
            matches = [matches]
        return fp.type.lower() in [value for value in [match_value.lower() for match_value in matches]]

    def _fingers(self) -> dict:
        return None

    def add_host(self, value):
        """
        添加HOST参数

        :param value: HOST 值
        :return:
        """
        self.OPTIONS.update({'host': OptHost(value, description="目标地址 (可选IP端口或URL地址)", require=True)})

    def add_payload(self, value):
        """
        添加payload

        :param value: payload 别名或是路径信息
        :return:
        """
        self.OPTIONS.update({'payload': OptString(value, description="使用的攻击载荷", require=True)})

    def _init(self) -> bool:
        """
        在模块运行前先调用的初始化函数

        :return:
        :rtype: bool
        """
        pass

    def _verify(self):
        """
        以exp的verify模式验证目标漏洞是否存

        :return:    Response
        """
        raise NotImplementedError("_verify")

    def _exploit(self):
        """
        以exp的exploit模式进行漏洞检测利用

        :return:    Response
        """
        raise NotImplementedError("_exploit")

    def _clean(self):
        """
        日志清理

        :return:    Response
        """
        pass

    async def aCloser(self):
        """
        关闭异步请求接口

        :return:
        """
        try:
            await self.asyncRequest.aclose()
        except RuntimeError as e:
            pass

    def scfInit(self, CloudFunctions):
        """
        初始化云函数

        :param CloudFunctions: 云函数配置信息
        :return:
        """
        configs = scfInit(CloudFunctions)
        self.request.scfCfg = self.asyncRequest.scfCfg = configs

    def run(self, options, mode="Verify"):
        """
        Exploit模块调用入口

        :param options: 命令行参数信息及模块参数信息
        :param mode: 利用模式(exploit)或者验证模式(verify)
        :return:
        """
        console.info("正在以 [green]{0}[/green] 模式运行模块 [bright_magenta]{1}[/bright_magenta]"
                     .format(mode, self.Name))
        self.result = Result(self)  # 初始化执行结果
        if 'host' in self.OPTIONS and not self.get_option("host") and self.OPTIONS['host'].require:
            self.result.fail("目标地址未设置.")
            raise ExploitValidationException("[red1]请设置目标地址(可选IP端口或URL地址)[/red1]")

        self.request = Request.instance(options)  # 初始化HTTP同步请求对象Request
        self.asyncRequest = Request.instance(options, isSync=True)  # 初始化HTTP异步请求对象asyncRequest
        # 设置payload
        if options.payload:
            self.payloadInit(options)
        if options.useScf:
            self.scfInit(env.Config.CloudFunctions)
        try:
            self._init()     # 运行前先带哦用init函数
            if mode.lower() == "verify":
                self._verify()
            else:
                self._exploit()
            self._clean()
        except KeyboardInterrupt:
            console.warning(f"已手动终止运行 {self.Name}")
        except NotImplementedError as e:
            console.error("模块实现错误,请编写必要功能方法: {0}".format(e.args[0]))
        finally:
            self.request.close()
            loop = None
            try:
                loop = asyncio.get_event_loop()
            except RuntimeError as e:
                if "There is no current event loop in thread" in str(e):
                    loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            asyncio.get_event_loop().run_until_complete(self.aCloser())
