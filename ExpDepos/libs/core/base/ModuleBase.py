#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/11/16 17:26
"""
from ExpDepos.libs.core.common.Common import *
from ExpDepos.libs.core.base.OptionsBase import *
from ExpDepos.libs.core.common.Enums import EXP_CATEGORY, VUL_TYPE, FINGERPRINT, RANK
from ExpDepos.libs.core.base.ExceptionBase import ExploitAttribException, ExploitValidationException


class ModuleBase(object):
    Name = None  # exp名称
    Alias = None  # 漏洞别名
    Author = None  # 编写作者
    VulType = None  # 漏洞类型
    Category = None  # 漏洞分类
    Create_Date = None  # exp编写日期
    Update_Date = None  # exp更新日期
    Rank = None  # exp效果(可选：Excellent Great Good Normal Average Low Manual)
    AppPowerLink = None  # 漏洞厂商主页地址
    AppName = None  # 漏洞应用名称
    AppVersion = None  # 漏洞影响版本
    References = []
    Desc = """
            """
    Description = """
                """
    SPEC = None  # 模块SPEC，无需自定义，加载时候自动设置

    def __init__(self):
        self.OPTIONS = dict()
        if hasattr(self, "_options") \
                and len(self._options()) > 0:
            # 将用户自定义选项名全部转换为小写，以便在命令行使用选项传入
            self.OPTIONS.update({key.lower(): value for key, value in self._options().items()})
        self.opt_parse = None  # 使用argparse.ArgumentParser解析的模块参数对象
        self.requireOpts = None  # 模块用户自定义的必须参数

    def _options(self):
        return dict()

    def get_options(self):
        """
        返回当前OPTIONS键值对应的列表

        :return: dic
        """
        return {key: val.value for key, val in self.OPTIONS.items()}

    def get_allOpts(self):
        """
        获取当前模块所有自定义参数

        :return: list 所有自定义参数列表
        """
        return [key.lower() for key in self.OPTIONS.keys()]

    def set_option(self, key, value):
        """
        设置模块用户自定义参数值

        :param key: 用户自定义参数名
        :param value: 用户自定义参数值
        :return:
        """
        if key not in self.OPTIONS:
            raise ExploitAttribException("无法找到选项 {} 请确认该选项是否存在".format(key))
        if self.OPTIONS[key.lower()].choices and value not in self.OPTIONS[key.lower()].choices:
            raise ExploitAttribException("{0} 选项值设置错误，可选范围: {1}".format(key, self.OPTIONS[key.lower()].choices))
        self.OPTIONS[key.lower()].__set__("", value)

    def get_option(self, key, default=None):
        """
        返回模块用户自定义参数值

        :param key: 需要获取的参数名
        :param default: 默认值
        :return: 参数名对应值
        """
        if key.lower() not in self.OPTIONS:
            if default is not None:
                return default
            raise ExploitAttribException("无法找到选项 '{}' 请确认选项是否配置".format(key))
        return self.OPTIONS[key.lower()].value

    def get_requireOpts(self):
        """
        获取当前模块必选参数

        :return: list 必选参数列表
        """
        return [key.lower() for key in self.OPTIONS.keys()
                if self.OPTIONS[key.lower()].require is True and not self.get_option(key.lower())]

    def help(self):
        """
        显示用户自定义参数帮助信息

        :return:
        """
        console.info("{0} 模块参数帮助.".format(self.Name))
        options = self.OPTIONS
        if len(options) == 0:
            console.info("模块 {0} 暂无用户自定义参数信息.")
        console.debug("获取模块 {0} 用户自定义选项信息 {1}".format(self.Name, options.keys()))
        if not self.opt_parse:
            self.opt_parse = self.get_parse(options)
        console.print("")
        self.opt_parse.print_help()

    def get_parse(self, options):
        """
        根据模块用户自定义的选项信息生成 argparse.ArgumentParser 对象

        :param options: 模块用户自定义选项列表
        :return: argparse.ArgumentParser
        """
        opt_parse = argparse.ArgumentParser(prog=self.SPEC, conflict_handler='resolve', add_help=False,
                                            usage="ExpDepos -H host -M {0} [-P,--options] [Module Options]"
                                            .format(format_module(self.SPEC)))
        module_opt_group = opt_parse.add_argument_group("Module Options")
        for key, value in options.items():
            if "-" in key:  # 带有"-"符号的参数名称argparse会自动替换成"_"
                raise ExploitValidationException(f"参数名 [green]{key}[/green] 错误, 此处不应有 '-', "
                                                 f"请使用 [green]{key.replace('-', '_')}[/green]。")
            args = {"help": options[key].description, "required": False if self.get_option(key.lower())
                    else options[key].require}
            if isinstance(options[key], OptBoolean):
                args.update({"action": "store_true"})   # 如果是OptBoolean则添加 action参数用于传入时候无须具体值的方式
            if value.value:
                args.update({"default": value.value})   # 设置默认值
            if options[key].choices:
                args.update({"choices": options[key].choices})  # 设置 choices
            module_opt_group.add_argument("--" + key.lower(), **args)

        return opt_parse

    def parse_options(self, source):
        """
        解析模块必选参数

        :param source: 命令行提交的-P或者--options选项值
        :return: argparse 解析参数后的Namespace
        """
        # 当必选项大于0且用户为设置任何选项值的时候抛出错误
        if source is None and len(self.get_requireOpts()) > 0:
            raise ExploitValidationException("模块缺少必要参数 {0}. 请使用[bold cyan]-P[/bold cyan]"
                                             "或者[bold cyan]--options[/bold cyan]选项提供."
                                             .format(self.get_requireOpts()))
        if not self.opt_parse:
            self.opt_parse = self.get_parse(self.OPTIONS)
        if source is not None:
            return self.opt_parse.parse_args(cli2args(source.split()))
        else:
            return None
