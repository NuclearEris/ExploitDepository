#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/7/6 15:16
"""

import os
import ast
import sys
import importlib
from _ast import Import, ImportFrom
from typing import Any
import chardet


def get_encoding(file):
    """
    获取文件编码信息
    :param file: 文件路径
    :return: 文件编码信息
    """
    with open(file, 'rb') as f:
        tmp = chardet.detect(f.read())
        return tmp['encoding']


class ModuleFinder(ast.NodeTransformer):
    """
    Python库中的modulefinder在windows上存在兼容性问题
    自己实现通过源码分析方式查找模块依赖
    """

    def __init__(self, filePath):
        """
        :param filePath: 源文件路径
        """
        self.filePath = filePath

        self.modules = list()
        self.unload_modules = list()

        # 添加源文件路径到sys.path中 以便引入源文件所在路径下的模块
        sys.path.append(os.path.dirname(filePath))

    def add_module(self, module):
        """
        添加并验证模块名称
        :param module: 模块名称
        :return:
        """
        self.modules.append(module)
        try:
            importlib.import_module(module)
        except ModuleNotFoundError:
            self.unload_modules.append(module)

    def visit_Import(self, node: Import) -> Any:
        """
        重写父类visit_Import方法解析Import语法
        :param node:
        :return:
        """
        for i in node.names:
            self.add_module(i.name)

    def visit_ImportFrom(self, node: ImportFrom) -> Any:
        """
        重写父类visit_ImportFrom方法解析from x import语法
        :param node:
        :return:
        """
        self.add_module(node.module)

    def analysis(self):
        """
        解析文件源码返回节点类，交由visit方法
        :return:
        """
        with open(self.filePath, "rt", encoding=get_encoding(self.filePath)) as fp:
            self.visit(ast.parse(fp.read(), self.filePath))
