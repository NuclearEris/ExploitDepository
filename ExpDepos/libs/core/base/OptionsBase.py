#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/3/24 14:16
"""

import re
from ExpDepos.libs.core.ModuleLoader import ModuleLoader
from ExpDepos.libs.core.base.ExceptionBase import ExpDeposValidationException


class Option(object):
    """
    Exploit模块自定义选项类型
    """

    def __init__(self, default="", description="", require=False, choices=[]):
        """
        :param default: 参数默认值
        :param description: 参数描述信息
        :param require: 是否必选参数
        :param choices: 可选值列表
        """
        self.description = description
        self.require = require
        self.choices = choices
        self.__set__("", default)

    def __get__(self):
        return self.value

    def __iter__(self):
        # first start by grabbing the Class items
        iters = dict((x, y) for x, y in Option.__dict__.items() if x[:2] != '__')

        # then update the class items with the instance items
        iters.update(self.__dict__)

        # now 'yield' through the items
        for x, y in iters.items():
            yield x, y


class OptString(Option):
    """
    String类型选项

    Args:
        default(String): 选项默认值
        description(String): 选项描述信息
        require(boolean): 是否必须
    """

    def __init__(self, default, description, require=False,  choices=[]):
        super().__init__(default, description, require, choices)
        self.type = "String"

    def __set__(self, obj, value):
        if isinstance(value, str):
            self.value = value
            return
        try:
            self.value = str(value)
        except ValueError:
            raise ExpDeposValidationException("选项错误.无法将值 {} 转换成 'String' 类型".format(value))


class OptInteger(Option):
    """
    String类型选项

    Args:
        default(String): 选项默认值
        description(String): 选项描述信息
        require(boolean): 是否必须
    """

    def __init__(self, default, description, require=False,  choices=[]):
        super().__init__(default, description, require, choices)
        self.type = "Integer"

    def __set__(self, obj, value):
        if isinstance(value, int):
            self.value = value
            return
        try:
            self.value = int(value)
        except ValueError:
            raise ExpDeposValidationException("选项错误.无法将值 {} 转换成 'Integer' 类型".format(value))


class OptFloat(Option):
    """
    String类型选项

    Args:
        default(String): 选项默认值
        description(String): 选项描述信息
        require(boolean): 是否必须
    """

    def __init__(self, default, description, require=False, choices=[]):
        super().__init__(default, description, require, choices)
        self.type = "Float"

    def __set__(self, obj, value):
        if isinstance(value, float):
            self.value = value
            return
        try:
            self.value = float(value)
        except ValueError:
            raise ExpDeposValidationException("选项错误.无法将值 {} 转换成 'Float' 类型".format(value))


class OptBoolean(Option):
    """
    String类型选项

    Args:
        default(String): 选项默认值
        description(String): 选项描述信息
        require(boolean): 是否必须
    """

    def __init__(self, default, description, require=False, choices=[]):
        super().__init__(default, description, require, choices)
        self.type = "Boolean"

    def __set__(self, obj, value):
        if isinstance(value, bool):
            self.value = value
            return
        if value.lower() == "true":
            self.value = True
        elif value.lower == "false":
            self.value = False
        else:
            raise ExpDeposValidationException("选项错误.无法将值 {} 转换成 'Boolean' 类型".format(value))


class OptHost(Option):
    """
    Host类型选项

    Args:
        default(String): 选项默认值
        description(String): 选项描述信息
        require(boolean): 是否必须
    """

    URL_HOST_REGEX = r"(^(https?|ftp)://)?" \
                     r"((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3}/?" \
                     r"(\:([0-9]|[1-9]\d{1,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])" \
                     r"/?)?$"

    URL_DOMAIN_REGEX = r"(^(https?|ftp)://)?" \
                       r"([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}/?" \
                       r"(\:([0-9]|[1-9]\d{1,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])" \
                       r"/?)?$"

    def __init__(self, default, description, require=False, choices=[]):
        super().__init__(default, description, require, choices)
        self.type = "Host"

    def __set__(self, obj, value):
        if not self.check_is_host(value):
            raise ExpDeposValidationException("选项错误.无法将值 {} 转换成 'Host' 类型".format(value))
        self.value = value

    def check_is_host(self, value):
        return re.match(OptHost.URL_HOST_REGEX, value) or re.match(OptHost.URL_DOMAIN_REGEX, value)


class OptPayload(Option):
    """
    Payload 类型 用于在payload中调用其他payload

    """

    def __init__(self, default, description, require=False, choices=[]):
        super().__init__(default, description, require, choices)
        self.type = "Payload"

    def __set__(self, obj, value):
        if value and not ModuleLoader.get_loaded_module(value):
            raise ExpDeposValidationException("Payload类型错误.无法找到名为 {} 的Payload".format(value))
        self.value = value


class OptEncoder(Option):
    """
    Encoder 类型 用于设置payload编码器

    """

    def __init__(self, default, description, require=False, choices=[]):
        super().__init__(default, description, require, choices)
        self.type = "Encoder"

    def __set__(self, obj, value):
        if value and not ModuleLoader.get_loaded_module(value):
            raise ExpDeposValidationException("Encoder类型错误.无法找到名为 {} 的Encoder".format(value))
        self.value = value
