#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/11/16 16:54
"""
import builtins
import traceback
from ExpDepos.libs.core.base.ExceptionBase import ExpDeposExploitException
from ExpDepos.libs.core.base.ModuleBase import *
from ExpDepos.libs.core.common.Enums import EXP_CATEGORY


class PayloadBase(ModuleBase):

    def __init__(self):
        super(PayloadBase, self).__init__()
        self.OPTIONS.update({'encoder': OptEncoder("", description="Payload编码器", require=False)})
        self.initPayloadOpts()

    def __str__(self):
        trace = [traceItem[-2] for traceItem in traceback.extract_stack()]
        if '_verify' not in trace and '_exploit' not in trace:
            return super(PayloadBase, self).__str__()
        return self.string

    @property
    def bytes(self):
        payload = self.generate()
        if not isinstance(payload, bytes):
            try:
                payload = payload.encode()
            except ValueError:
                payload = ''
        return payload

    @property
    def string(self):
        payload = self.generate()
        if not isinstance(payload, str):
            try:
                payload = payload.decode()
            except ValueError:
                payload = ''
        return payload

    def initPayloadOpts(self):
        """
        初始化Payload类型选项的相关参数

        :return:
        """
        for key, obj in self.OPTIONS.copy().items():
            if isinstance(obj, OptPayload):
                self.addPayloadOpt(key)

    def addPayloadOpt(self, key):
        self.OPTIONS.update({key + "_opts": OptString("", description=key + "对应Payload的参数", require=False),
                             key + '_enc': OptEncoder("", description=key + "对应Payload的编码器", require=False),
                             key + '_enc_opts': OptString("", description=key + "对应Payload编码器参数", require=False)})

    def add_encoder(self, encoder):
        """
        添加encoder

        :param encoder: encoder别名或是路径
        :return:
        """
        self.OPTIONS.update({'encoder': OptString(encoder, description="使用的攻击载荷", require=True)})

    def get_option_of_payload(self, key, payload):
        """
        获取参数为payload类型的值

        :param key: 参数名
        :param payload: payload别名
        :return:
        """
        console.info("为攻击载荷 [bold yellow]{0}[/bold yellow] 附加攻击载荷: [bold yellow]{1}[bold yellow]"
                     .format(self.Name, payload))
        payload_info = ModuleLoader.get_loaded_module(payload)
        if not payload_info:
            raise ExploitValidationException("无效的payload: {0}".format(payload))
        payload_obj = payload_info["module"]

        # 设置payload参数
        payload_opts = self.get_option(key + "_opts")
        if payload_opts:
            payload_options = payload_obj.parse_options(payload_opts)
            if payload_options:
                console.debug("解析到Payload参数：{0}".format(payload_options))
            else:
                raise ExpDeposExploitException("Payload 参数解析失败: {0}".format(payload_opts))
            ModuleLoader.set_module_opts(payload_obj, payload_options)

        # 添加编码器
        payload_enc = self.get_option(key + "_enc")
        if payload_enc:
            encoder_info = ModuleLoader.get_loaded_module(payload_enc)
            if not encoder_info:
                raise ExploitValidationException("无效的Encoder: {0}".format(payload_enc))
            payload_obj.add_encoder(payload_enc)
            encoder_obj = encoder_info["module"]
            # 设置编码器参数
            encoder_opts = self.get_option(key + "_enc_opts")
            if encoder_opts:
                encoder_options = encoder_obj.parse_options(encoder_opts)
                if encoder_options:
                    console.debug("解析到Encoder参数：{0}".format(encoder_options))
                else:
                    raise ExpDeposExploitException("Encoder 参数解析失败: {0}".format(encoder_opts))
                ModuleLoader.set_module_opts(encoder_obj, encoder_options)

        return payload_obj.generate()

    def get_option(self, key, default=None):
        """
        重写父类 get_option函数 用于实现返回Payload类型的值

        :param key:
        :param default:
        :return:
        """
        key = key.lower()
        trace = [traceItem[-2] for traceItem in traceback.extract_stack()]
        if key not in self.OPTIONS:
            if default is not None:
                return default
            raise ExploitAttribException("无法找到选项 '{}' 请确认选项是否配置".format(key))
        if isinstance(self.OPTIONS[key], OptPayload) and 'generate' in trace:
            if not self.OPTIONS[key].value:
                raise ExploitValidationException("请先为攻击载荷 [bold yellow]{0}[/bold yellow] 参数"
                                                 " [bold green]{1}[/bold green] 设置附加载荷.".format(self.Name, key))
            return self.get_option_of_payload(key, self.OPTIONS[key].value)
        return super(PayloadBase, self).get_option(key)

    def encode(self, payload) -> any([str, builtins.bytes]):
        encoder = self.get_option("encoder")
        enc_info = ModuleLoader.get_loaded_module(encoder)
        if not enc_info:
            raise ExploitValidationException(f"无法为 [bold yellow]{self.Name}[/bold yellow] 使用编码器,"
                                             f" 请确认编码器 [bold green]{encoder}[bold green] 是否正确加载")
        enc_obj = enc_info["module"]
        return enc_obj.encode(payload)

    def _options(self):
        return super()._options()

    def _generate(self) -> any([str, builtins.bytes]):
        raise NotImplementedError("generate")

    def generate(self) -> any([str, builtins.bytes]):
        if self.get_option('encoder'):
            return self.encode(self._generate())
        return self._generate()
