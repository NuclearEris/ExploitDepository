#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/3/13 11:21
"""

import os
import re
import random
import sys
import argparse
import pyfiglet
from ExpDepos.libs.core.common.Console import Console
from ExpDepos.config.config import Config
from ExpDepos.libs.core.AttribDict import AttribDict

# 终端信息输出统一使用rich的Logging Handler
console = Console()
env = AttribDict()


def Root_Path():
    """
    @function   返回项目根目录
    :return:    String
    """
    return os.path.abspath(os.path.dirname(os.path.abspath(__file__)) + "/../../../../".replace('/', os.sep))


def show_banner():
    console.print("")
    fonts = ["big", "roman", "slant", "standard", "starwars",
             "univers", "banner4", "epic"]
    banner = pyfiglet.Figlet(font=fonts[random.randrange(len(fonts))], width=200)
    console.print(banner.renderText("ExpDepos"))
    console.print(f"\t\t\t\t\t=[ [bold yellow]ExploitDepository[/] [green]{Config['VERSION']}[/]\t]")
    console.print(f"\t\t\t\t\t=[ [bold yellow]By[/] [bold red]Castiel[/] at {Config['RELEASE_DATE']}\t\t]")
    console.print("")


def show_version():
    show_banner()
    console.print(f"ExpDepos Version: \"{Config['VERSION']}\"")
    exit()


def validation_is_static(key):
    pattern = re.compile(r'[A-Z][_]?|^[A-Z].*[a-z][_]?')
    return pattern.match(key)


def get_module_base_info(module_attr, module):
    base_info = dict()
    for key in module_attr:
        value = getattr(module, key)
        if validation_is_static(key) \
                and (value is not None) \
                and key != "OPTIONS":
            base_info.update({key: value})
    return base_info


def get_module_info(module):
    module_attr = dir(module)
    base_info = get_module_base_info(module_attr, module)
    console.debug("获取模块 {0} 用户自定义静态属性 {1}".format(module.Name, base_info.keys()))
    options_info = module.OPTIONS
    console.debug("获取模块 {0} 用户自定义选项信息 {1}".format(module.Name, options_info.keys()))
    return {"base_info": base_info, "options_info": options_info}


def format_module(module_spec):
    return module_spec.replace(".", os.sep)


def format_module_attr(value):
    format_str = ""
    if isinstance(value, list):
        for i, v in enumerate(value):
            if i != len(value) - 1:
                format_str = format_str + v + "\n"
            else:
                format_str = format_str + v
    else:
        format_str = value
    return str(format_str)


def bool2mark(require):
    if require is True:
        return "[bold dark_red]Yes[/bold dark_red]"
    return ""


def none2str(obj):
    if obj is None or obj == "":
        return "[bold orange1]None[/bold orange1]"
    return ""


def show_options(module, options_info):
    table = console.rTable("Name", "Current Setting", "Type", console.rColumn("Required"),
                           "Description", style="bold green", box=console.rBox.SIMPLE_HEAD, width=90)
    for key in options_info.keys():
        table.add_row(key,
                      none2str(module.OPTIONS[key].value),
                      "[dodger_blue2]" + module.OPTIONS[key].type + "[/dodger_blue2]",
                      bool2mark(module.OPTIONS[key].require),
                      "[cyan]" + module.OPTIONS[key].description + "[cyan]")
    console.print(table)


def show_module_info(module):
    module_info = get_module_info(module)
    base_info = module_info.pop("base_info")
    options_info = module_info.pop("options_info")

    console.info("{0} 信息:".format(module.Name))

    # 使用rich.table格式化显示信息
    console.print("\nBasic Information([bold dark_red]{0}[/ bold dark_red])："
                  .format(format_module(base_info.get("SPEC"))), style="bold magenta3")
    grid = console.rTable.grid(expand=True)
    grid.add_column(style="cyan", width=6)
    grid.add_column(style="dodger_blue2")

    # 按序先显示重点属性
    grid.add_row("\tName: ", base_info.pop("Name"))
    grid.add_row("\tModule: ", format_module(base_info.pop("SPEC")))

    # 再显遍历显示剩余属性
    for key in base_info.keys():
        if key != "Description" and key != "References" and key != "Desc":
            grid.add_row("\t" + key + ": ", format_module_attr(base_info.get(key)))
    console.print(grid)

    # 显示用户自定义属性表
    console.print("\nBasic Options: ", style="bold magenta3")
    show_options(module, options_info)

    # 最后显示描述及参考信息
    if 'Desc' in base_info:
        console.print("\nVulnerable Description: ", style="bold magenta3")
        console.print(console.rMarkdown(base_info.pop("Desc")))
    if 'Description' in base_info:
        console.print("\nExploit Description: ", style="bold magenta3")
        console.print(console.rMarkdown(base_info.pop("Description")))
    if 'References' in base_info:
        console.print("\nReferences: ", style="bold magenta3")
        console.print("\t" + format_module_attr(base_info.pop("References")).replace("\n", "\n\t"))


def check_update():
    console.info("update")
    exit()


def envConfig_init():
    console.debug("将系统配置信息设置到env中")
    env.Config = AttribDict()
    for key, value in Config.items():
        setattr(env.Config, key, value)


def set_verbose(verbose):
    console.msgLevel = verbose
    console.debug(f"设置verbose为: {verbose}")


def envArgs_init(args):
    env.CliOptions = AttribDict()
    # 解析命令函参数
    # 存储命令行参数值到env中
    console.debug("解析到命令行参数: ", args)
    console.debug("将命令行参数信息设置到env中")
    for key, value in vars(args).items():
        setattr(env.CliOptions, key, value)


def env_init():
    # 初始化命令行参数
    args = parse_cliArgs()
    # 设置verbose
    set_verbose(args.verbose)
    console.info("初始化环境...")
    # 设置环境变量
    envArgs_init(args)
    envConfig_init()


def parse_cliArgs(source=sys.argv[1:]):
    args = None
    try:
        parse = argparse.ArgumentParser(prog="ExpDepos", conflict_handler='resolve')
        parse.add_argument("-V", "--version", help="显示版本信息并退出", dest="show_version",
                           action="store_true")
        parse.add_argument("--update", help="更新ExpDepos", dest="check_update",
                           action="store_true")
        parse.add_argument("-v", "--verbose", help="控制台信息输等级,该值越大输出信息越详细("
                                                   "0=ERROR|EXCEPTION,"
                                                   "1=SUCCESS|FAILED,"
                                                   "2=WARNING,"
                                                   "3=INFO,"
                                                   "4=DEBUG)",
                           default=Config['Console']['msgLevel'], choices=[0, 1, 2, 3, 4], type=int, dest="verbose")

        # target group
        target_group = parse.add_argument_group("target arguments")
        target_group.add_argument("-H", "--host", help="目标地址 (可选IP端口或URL地址)",
                                  dest="host", type=str)

        # module group
        mode_group = parse.add_argument_group("module arguments")
        mode_group.add_argument("-M", "--module", help="使用的Exploit模块(多个模块使用','分割)",
                                dest="module", type=str)

        # module mode group
        module_mode = mode_group.add_mutually_exclusive_group()
        module_mode.add_argument("--info", help="显示模块详细信息", dest="show_info", action="store_true")
        module_mode.add_argument("--verify", help="以验证模式执行Exploit模块", action="store_true")
        module_mode.add_argument("--exploit", help="以利用模式执行Exploit模块", action="store_true")
        module_mode.add_argument("-h", "--help", help="显示Exploit模块帮助 与-M搭配使用",
                                 dest="module_help", action="store_true")

        args = parse.parse_args(source)
        # 校验必要参数
        if not any((args.show_version, args.host, args.check_update)):
            parse.print_help()
            exit()
        # 设置了host参数,则module参数是必须的
        if args.host and args.module is None:
            console.error("缺少必要参数([bold cyan]-M, --module[/bold cyan]). "
                          "请使用[bold cyan]-M[/bold cyan]或者[bold cyan]--module[/bold cyan]选项选择要运行的模块.")
            exit()
    except Exception as e:
        console.exception(repr(e))
    return args


def parse_options():
    # 解析 optional 参数
    if env.CliOptions.show_version:
        show_version()
    if env.CliOptions.check_update:
        check_update()
