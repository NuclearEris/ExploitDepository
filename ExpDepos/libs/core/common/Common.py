#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/3/13 11:21
"""

import os
import random
import sys
import argparse
import pyfiglet
from ExpDepos.libs.core.common.Console import Console
from ExpDepos.config.config import Config
from ExpDepos.libs.core.AttribDict import AttribDict

# 终端信息输出统一使用rich的Logging Handler
console = Console()
env = AttribDict()


def Root_Path():
    """
    @function   返回项目根目录
    :return:    String
    """
    return os.path.abspath(os.path.dirname(os.path.abspath(__file__)) + "/../../../../".replace('/', os.sep))


def get_filename(filepath, with_ext=True):
    base_name = os.path.basename(filepath)
    return base_name if with_ext else os.path.splitext(base_name)[0]


def get_dir(filepath, with_filename=False):
    base_dir = os.path.dirname(filepath)
    file_name = get_filename(filepath, with_ext=False)
    return base_dir if not with_filename else base_dir + os.sep + file_name


def get_spec(filepath):
    return get_dir(filepath, with_filename=True).replace(os.sep, '.')


def show_banner():
    console.print("")
    fonts = ["big", "roman", "slant", "standard", "starwars",
             "univers", "banner4", "epic"]
    banner = pyfiglet.Figlet(font=fonts[random.randrange(len(fonts))], width=200)
    console.print(banner.renderText("ExpDepos"))
    console.print(f"\t\t\t\t\t=[ [bold yellow]ExploitDepository[/] [green]{Config['VERSION']}[/]\t]")
    console.print(f"\t\t\t\t\t=[ [bold yellow]By[/] [bold red]Castiel[/] at 2021.04\t\t]")
    console.print("")


def show_version():
    show_banner()
    console.print(f"ExpDepos Version: \"{Config['VERSION']}\"")
    exit()


def check_update():
    console.info("update")
    exit()


def envConfig_init():
    console.debug("将系统配置信息设置到env中")
    env.Config = AttribDict()
    for key, value in Config.items():
        setattr(env.Config, key, value)


def set_verbose(verbose):
    console.msgLevel = verbose
    console.debug(f"设置verbose为: {verbose}")


def envArgs_init(args):
    env.CliOptions = AttribDict()
    # 解析命令函参数
    # 存储命令行参数值到env中
    console.debug("解析到命令行参数: ", args)
    console.debug("将命令行参数信息设置到env中")
    for key, value in vars(args).items():
        setattr(env.CliOptions, key, value)


def env_init():
    # 初始化命令行参数
    args = parse_cliArgs()
    console.info("初始化环境...")
    # 设置verbose
    set_verbose(args.verbose)
    # 设置环境变量
    envArgs_init(args)
    envConfig_init()


def parse_cliArgs(source=sys.argv[1:]):
    args = None
    try:
        parse = argparse.ArgumentParser(prog="ExpDepos")
        parse.add_argument("-V", "--version", help="显示版本信息并退出", dest="show_version",
                           action="store_true")
        parse.add_argument("--update", help="更新ExpDepos", dest="check_update",
                           action="store_true")
        parse.add_argument("-v", "--verbose", help="控制台信息输等级,该值越大输出信息越详细",
                           default=Config['Console']['msgLevel'], choices=[0, 1, 2, 3, 4], type=int, dest="verbose")

        # target group
        target_group = parse.add_argument_group("target arguments")
        target_group.add_argument("-H", "--host", help="目标地址 (可选IP端口或URL地址)",
                                  dest="host", type=str)

        # module group
        mode_group = parse.add_argument_group("module arguments")
        mode_group.add_argument("-M", "--module", help="使用的Exploit模块(多个模块使用','分割)",
                                dest="module", type=str)
        # mode_group.add_argument("--info", help="显示模块详细信息", dest="show_info", action="store_true")

        # module mode group
        module_mode = mode_group.add_mutually_exclusive_group()
        module_mode.add_argument("--info", help="显示模块详细信息", dest="show_info", action="store_true")
        module_mode.add_argument("--verify", help="以验证模式执行Exploit模块", action="store_true")
        module_mode.add_argument("--exploit", help="以利用模式执行Exploit模块", action="store_true")

        args = parse.parse_args(source)
        if not any((args.show_version, args.host, args.module, args.check_update)):
            parse.error("缺少必要参数 (-H, --module, --version). 请使用-h或者--help查看命令帮助.")
    except Exception as e:
        console.exception(repr(e))
    return args


def parse_options():
    # 解析 optional 参数
    if env.CliOptions.show_version:
        show_version()
    if env.CliOptions.check_update:
        check_update()
