#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/3/19 16:15
"""
import sys
import os
import re
from typing import Any, Union
from rich.console import Console as richConsole, JustifyMethod, OverflowMethod
from rich.traceback import Traceback
from rich.style import Style
from ExpDepos.config.config import Config
import logging

rConsole = richConsole(log_path=False, record=True)

# 消息样式配置
LEVELS = {'DEBUG': {'prefix': '[*]', 'color': 'cyan', 'level': 4},
          'INFO': {'prefix': '[*]', 'color': 'bold bright_white', 'level': 3},
          'SUCCESS': {'prefix': '[+]', 'color': 'bold bright_green', 'level': 1},
          'FAILED': {'prefix': '[-]', 'color': 'bold red', 'level': 1},
          'WARNING': {'prefix': '[!]', 'color': 'bold yellow', 'level': 2},
          'ERROR': {'prefix': '[!]', 'color': 'bright_red on bright_black', 'level': 0},
          'EXCEPTION': {'prefix': '[!]', 'color': 'red1 on bright_black', 'level': 0},
          }


class Console:
    """
    消息输出类，用于控制台输出各种级别的消息
    """

    def __init__(self, msgLevel=Config['Console']['msgLevel'], logLevel=Config['Console']['logLevel']):
        # 信息输出等级，值越高输出信息越详细，默认值3
        self.msgLevel = msgLevel
        self.logLevel = logLevel

        # 日志设置
        if Config["LOG"] is True:
            if not os.path.exists(Config["LOG_PATH"]):
                os.makedirs(Config["LOG_PATH"])
            file_handler = logging.FileHandler(Config["LOG_FILE"])
            file_handler.setFormatter(logging.Formatter('%(asctime)s [%(filename)s, Line %(lineno)d] \t'
                                                        '%(levelname)s: %(message)s', datefmt='%Y-%m-%d %X'))
            file_handler.setLevel(logging.NOTSET)
            self.loger = logging.getLogger("ExpDepos")
            self.loger.addHandler(file_handler)
            # 关闭屏幕输出
            self.loger.propagate = False

    def setMsgLeve(self, msgLevel):
        self.msgLevel = msgLevel

    def setLogLevel(self, LogLevel):
        self.logLevel = LogLevel

    @staticmethod
    def makePrefix(level):
        """
        用于构造消息前缀及前缀颜色

        :param level: 消息等级
        :return: tuple
        """
        level = level.upper()
        if level in LEVELS:
            prefix = tuple(['[{0}]{1} {2}[/]\t'.format(LEVELS[level]['color'], LEVELS[level]['prefix'], level)])
        return prefix

    @staticmethod
    def unmark(*objects):
        """
        去掉消息中样式标签，以便记录到日志文件

        :param objects: 含有样式标签的字符串元组
        :return: string
        """
        return " ".join([str(re.sub(r'(\[[\W]+\]|\[[A-Za-z ]+\])', '', s)) for s in objects])

    def print(
            self,
            *objects: Any,
            sep=" ",
            end="\n",
            style: Union[str, Style] = None,
            justify: JustifyMethod = None,
            overflow: OverflowMethod = None,
            no_wrap: bool = None,
            emoji: bool = None,
            markup: bool = None,
            highlight: bool = None,
            width: int = None,
            height: int = None,
            crop: bool = True,
            soft_wrap: bool = None,
    ):
        rConsole.print(
            *objects,
            sep=sep,
            end=end,
            style=style,
            justify=justify,
            overflow=overflow,
            no_wrap=no_wrap,
            emoji=emoji,
            markup=markup,
            highlight=highlight,
            width=width,
            height=height,
            crop=crop,
            soft_wrap=soft_wrap
        )

    def debug(self, *objects: Any,
              sep=" ",
              end="\n",
              style: Union[str, Style] = None,
              justify: JustifyMethod = None,
              emoji: bool = None,
              markup: bool = None,
              highlight: bool = None,
              log_locals: bool = False,
              _stack_offset=1, ):
        # console消息输出
        if self.msgLevel >= LEVELS['DEBUG']['level']:
            prefix = Console.makePrefix("DEBUG")
            rConsole.log(*(prefix + objects),
                         sep=sep,
                         end=end,
                         style=style,
                         justify=justify,
                         emoji=emoji,
                         markup=markup,
                         highlight=highlight,
                         log_locals=log_locals,
                         _stack_offset=_stack_offset)
        # 日志文件输出
        if self.logLevel >= LEVELS['DEBUG']['level'] \
                and Config["LOG"] is True:
            self.loger.debug(Console.unmark(*objects))

    def info(self, *objects: Any,
             sep=" ",
             end="\n",
             style: Union[str, Style] = None,
             justify: JustifyMethod = None,
             emoji: bool = None,
             markup: bool = None,
             highlight: bool = None,
             log_locals: bool = False,
             _stack_offset=1, ):
        if self.msgLevel >= LEVELS['INFO']['level']:
            prefix = Console.makePrefix("INFO")
            rConsole.log(*(prefix + objects),
                         sep=sep,
                         end=end,
                         style=style,
                         justify=justify,
                         emoji=emoji,
                         markup=markup,
                         highlight=highlight,
                         log_locals=log_locals,
                         _stack_offset=_stack_offset)
        # 日志文件输出
        if self.logLevel >= LEVELS['INFO']['level'] \
                and Config["LOG"] is True:
            self.loger.info(Console.unmark(*objects))

    def success(self, *objects: Any,
                sep=" ",
                end="\n",
                style: Union[str, Style] = None,
                justify: JustifyMethod = None,
                emoji: bool = None,
                markup: bool = None,
                highlight: bool = None,
                log_locals: bool = False,
                _stack_offset=1, ):
        if self.msgLevel >= LEVELS['SUCCESS']['level']:
            prefix = Console.makePrefix("SUCCESS")
            rConsole.log(*(prefix + objects),
                         sep=sep,
                         end=end,
                         style=style,
                         justify=justify,
                         emoji=emoji,
                         markup=markup,
                         highlight=highlight,
                         log_locals=log_locals,
                         _stack_offset=_stack_offset)
        # 日志文件输出
        if self.logLevel >= LEVELS['SUCCESS']['level'] \
                and Config["LOG"] is True:
            self.loger.info(Console.unmark(*objects))

    def failed(self, *objects: Any,
               sep=" ",
               end="\n",
               style: Union[str, Style] = None,
               justify: JustifyMethod = None,
               emoji: bool = None,
               markup: bool = None,
               highlight: bool = None,
               log_locals: bool = False,
               _stack_offset=1, ):
        if self.msgLevel >= LEVELS['FAILED']['level']:
            prefix = Console.makePrefix("FAILED")
            rConsole.log(*(prefix + objects),
                         sep=sep,
                         end=end,
                         style=style,
                         justify=justify,
                         emoji=emoji,
                         markup=markup,
                         highlight=highlight,
                         log_locals=log_locals,
                         _stack_offset=_stack_offset)
        # 日志文件输出
        if self.logLevel >= LEVELS['FAILED']['level'] \
                and Config["LOG"] is True:
            self.loger.info(Console.unmark(*objects))

    def warning(self, *objects: Any,
                sep=" ",
                end="\n",
                style: Union[str, Style] = None,
                justify: JustifyMethod = None,
                emoji: bool = None,
                markup: bool = None,
                highlight: bool = None,
                log_locals: bool = False,
                _stack_offset=1, ):
        if self.msgLevel >= LEVELS['WARNING']['level']:
            prefix = Console.makePrefix("WARNING")
            rConsole.log(*(prefix + objects),
                         sep=sep,
                         end=end,
                         style=style,
                         justify=justify,
                         emoji=emoji,
                         markup=markup,
                         highlight=highlight,
                         log_locals=log_locals,
                         _stack_offset=_stack_offset)
        # 日志文件输出
        if self.logLevel >= LEVELS['WARNING']['level'] \
                and Config["LOG"] is True:
            self.loger.warning(Console.unmark(*objects))

    def error(self, *objects: Any,
              sep=" ",
              end="\n",
              style: Union[str, Style] = None,
              justify: JustifyMethod = None,
              emoji: bool = None,
              markup: bool = None,
              highlight: bool = None,
              log_locals: bool = False,
              _stack_offset=1, ):
        if self.msgLevel >= LEVELS['ERROR']['level']:
            prefix = Console.makePrefix("ERROR")
            rConsole.log(*(prefix + objects),
                         sep=sep,
                         end=end,
                         style=style,
                         justify=justify,
                         emoji=emoji,
                         markup=markup,
                         highlight=highlight,
                         log_locals=log_locals,
                         _stack_offset=_stack_offset)
        # 日志文件输出
        if self.logLevel >= LEVELS['ERROR']['level'] \
                and Config["LOG"] is True:
            self.loger.error(Console.unmark(*objects))

    def exception(self, *objects: Any,
                  sep=" ",
                  end="\n",
                  style: Union[str, Style] = None,
                  justify: JustifyMethod = None,
                  emoji: bool = None,
                  markup: bool = None,
                  highlight: bool = None,
                  log_locals: bool = False,
                  _stack_offset=1, ):
        if self.msgLevel >= LEVELS['EXCEPTION']['level']:
            prefix = Console.makePrefix("EXCEPTION")
            rConsole.log(*(prefix + objects),
                         sep=sep,
                         end=end,
                         style=style,
                         justify=justify,
                         emoji=emoji,
                         markup=markup,
                         highlight=highlight,
                         log_locals=log_locals,
                         _stack_offset=_stack_offset)
            # 打印traceback
            exc_type, exc_value, exc_traceback = sys.exc_info()
            rConsole.log(Traceback.from_exception(
                exc_type,
                exc_value,
                exc_traceback, width=150))
        # 日志文件输出
        if self.logLevel >= LEVELS['EXCEPTION']['level'] \
                and Config["LOG"] is True:
            self.loger.exception(Console.unmark(*objects))
