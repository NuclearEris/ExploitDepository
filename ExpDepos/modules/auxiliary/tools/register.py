#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/9/1 15:52
"""

from rich.progress import Progress
from ExpDepos.libs.core.base.ExploitBase import *
from ExpDepos.libs.core.base.Fingerprint import register as fp_register
from ExpDepos.libs.core.common.Console import formatPgString
from ExpDepos.libs.core.common.Enums import FINGERPRINT

MATCHES_VALUE_TYPES = FINGERPRINT.ALLOW_MATCHES_VALUE_TYPE.copy()
MATCHES_VALUE_ATTRS = FINGERPRINT.ALLOW_MATCHES_VALUE_ATTR.copy()
EXTEND = ["version", "filepath", "account", "module", "model", "firmware", "os"]
MATCHES_VALUE_TYPES.extend(["mmh3", "text", "string", "regexp", "name", "regxp"])
MATCHES_VALUE_TYPES.extend(EXTEND)
MATCHES_VALUE_TYPES.pop(MATCHES_VALUE_TYPES.index("regex"))  # 去掉 regex


def transQuote(matches_item, action="decode"):
    """
    转换\" \'字符

    :param matches_item:
    :param action:
    :return:
    """
    if action == "encode":
        matches_item = matches_item.replace('\\\\', '%2F2F')    # 替换掉 \\ 防止 \\'问题
        matches_item = matches_item.replace('\\"', '%2F22')
        matches_item = matches_item.replace("\\'", "%2F27")
    else:
        matches_item = matches_item.replace('%2F2F', '\\\\')
        matches_item = matches_item.replace('%2F22', '\\"')
        matches_item = matches_item.replace("%2F27", "\\'")
    return matches_item


def parse_value(key, matches_item):
    """
    解析属性值

    :param key: 属性名称
    :param matches_item: 指纹匹配项字符串
    :return:
    """
    matches_item = transQuote(matches_item, "encode")   # 转义\" \'字符 防止与正则匹配冲突
    isRegex = re.search(r":" + key + "\\s?=>\\s?/(.*)/", matches_item)  # 验证是否是正则表达式
    if isRegex:  # 如果是正则值则使用贪婪模式匹配
        matches_value = re.search(r":" + key + "\\s?=>\\s?/(.*)/", matches_item)
    else:  # 匹配单引号或者双引号包裹的含或不含randstr()的格式
        quote = re.search(r":" + key + "\\s?=>\\s?\\[?((randstr\\(\\)\\+)?'(.*)'(\\+randstr\\(\\))?)\\]?",
                          matches_item)  # 匹配是否是单引号包裹
        if quote:
            matches_value = re.search(r":" + key + "\\s?=>\\s?\\[?((randstr\\(\\)\\+)?'(.*?)'(\\+randstr\\(\\))?)\\]?",
                                      matches_item)
        else:
            matches_value = re.search(r":" + key + "\\s?=>\\s?\\[?((randstr\\(\\)\\+)?\"(.*?)\"(\\+randstr\\(\\))?)\\]?",
                                      matches_item)
    if not matches_value:
        matches_value = re.search(r":" + key + "\\s?=>\\s?([\\d\\.]{1,4})", matches_item)
    # 匹配只有randstr()值的格式
    if not matches_value and re.search(r":" + key + "\\s?=>\\s?((.*)(randstr\\(\\)))", matches_item):
        matches_value = re.search(r":" + key + "\\s?=>\\s?((.*)(randstr\\(\\)))", matches_item)
    if matches_value:
        return isRegex, transQuote(formatRandstr(matches_value.group(1)))
    return isRegex, None


def parse_item(matches_item):
    """
    解析匹配项 url 或者 search

    :param matches_item: 指纹匹配项字符串
    :return:
    """
    items = dict()
    for item in FINGERPRINT.ALLOW_MATCHES_ITEM:
        if matchKey(item, matches_item):
            isRegex, itemValue = parse_value(item, matches_item)
            if itemValue is None:
                raise ExpDeposExploitException("无法匹配 {0} 的值".format(item))
            items.update({item: transItem(itemValue)})
    return items


def transItem(itemValue):
    """
    转换匹配项

    :param itemValue:
    :return:
    """
    if itemValue == "body":
        return "text"
    if itemValue == "all":
        return "text"
    itemValue = re.sub("\\s", "", itemValue)
    return itemValue


def transType(matchesType, isRegex):
    """
    转换匹配方式

    :param matchesType: whatWebs 的匹配方式
    :param isRegex: 是否是正则表达式
    :return:
    """
    if isRegex or matchesType == "regexp" or matchesType == "regxp":
        return "regex"
    if matchesType == 'mmh3':
        return "hash"
    if matchesType == 'text' \
            or matchesType == "string":
        return "keyword"
    return matchesType


def matchKey(key, matches_item):
    """
    精准校验匹配方式关键词

    :param key: 关键词
    :param matches_item: 指纹匹配项字符串
    :return:
    """
    return re.search(r":" + key + "\\s?=>\\s?", matches_item)


def parse_type(matches_item):
    """
    解析匹配方式

    :param matches_item: 指纹匹配项字符串
    :return:
    """
    types = [matchesType for matchesType in MATCHES_VALUE_TYPES
             if matchKey(matchesType, matches_item)]
    matches = dict()
    for matchesType in types:
        isRegex, typeValue = parse_value(matchesType, matches_item)
        if typeValue is None:
            raise ExpDeposExploitException("无法匹配 {0} 的值.".format(matchesType))
        matches.update({transType(matchesType, isRegex): typeValue})
        if matchesType in EXTEND:
            matches.update({"aim": matchesType})
    return matches


def make_type(matches_item):
    """
    为只有url匹配项的指纹构造匹配方式

    :param matches_item:
    :return:
    """
    if 'url' in matches_item:  # 如果只有url 则匹配方式为status匹配
        return {"status": 200}
    return matches_item


def parse_attr(matches_item):
    """
    解析属性

    :param matches_item: 指纹匹配项字符串
    :return:
    """
    attrs = dict()
    for attr in MATCHES_VALUE_ATTRS:
        if attr in matches_item:
            isRegex, attrValue = parse_value(attr, matches_item)
            if attrValue:
                attrs.update({attr: int(attrValue)})
    return attrs


def transform(matches_item):
    """
    转换whatWebs匹配项为ExpDepos指纹匹配项

    :param matches_item: 指纹匹配项字符串
    :return:
    """
    matchesItems = parse_item(matches_item)
    matchesTypes = parse_type(matches_item)
    if not availableTypes(matchesTypes):
        matchesTypes.update(make_type(matchesItems))
    if matchesTypes:
        matchesItems.update(matchesTypes)
        matchesAttr = parse_attr(matches_item)
        if matchesAttr:
            matchesItems.update(matchesAttr)
    return matchesItems


def normalRegx(matched):
    """
    构造正常的正则表达式语法 /(.*)/书写方式

    :param matched:
    :return:
    """
    prefix = matched.group(1)
    regex = matched.group(3)
    if matched:
        return prefix + '/' + regex + '/'


def formatRandstr(matchesValue):
    """
    替换randstr()为{randstr()}

    :param matchesValue:
    :return:
    """
    matchesValue = matchesValue.strip("'")  # 去掉头尾的单引号
    matchesValue = matchesValue.strip('"')  # 去掉头尾的双引号
    matchesValue = matchesValue.replace('\\/', "/")  # python中 / 不需要转义
    if 'randstr()' in matchesValue:
        matchesValue = re.sub(r"((')?(\s)?(\+)?(\s)?randstr\(\)(\s)?(\+)?(\s)?(')?)", "{randstr()}", matchesValue)
    return matchesValue


def formatMatchesLine(line):
    """
    格式化指纹匹配项字符串 主要替换 %r{ 方式的正则写法为 /(.*)/ 写法

    :param line:
    :return:
    """
    line = re.match(r"{((?:.|\n)*)}", line)  # 贪婪模式匹配 只保留除最外层{}外的字符
    if line:
        line = line.group(1)
    if re.search(r"(\s?=>\s?)(%r{)(.*)(\s?)", line):  # 替换 %r{(.+)} 方式的的正则写法为 /(.+)/ 方式
        line = re.sub(r"(\s?=>\s?)(%r{)(.*)(\s?)", normalRegx, line)
    return line


def makeUntilEnd(line, matchesList):
    """
    循环补齐被换行符隔断的匹配规则

    :param line: 被隔断的起始行
    :param matchesList: 按换行符分割的列表
    :return:
    """
    for nextLine in matchesList[matchesList.index(line) + 1:]:
        line += nextLine
        if nextLine.endswith('}') or nextLine.endswith('},'):
            break
    return line


def parse_matchesList(matches):
    """
    解析whatWebs所有匹配项

    :param matches: whatWebs matches数组字符串
    :return: list whatWebs matches 列表
    """
    splitList = matches.split("\n")
    matchesList = [line.strip() for line in splitList]  # 移除每行首尾空白字符
    newList = []
    for line in matchesList:
        if line.startswith('{'):
            if re.search(r"{((?:.|\n)*)}", line) and (line.endswith('}') or line.endswith('},')):
                newList.append(formatMatchesLine(line))
            else:
                # newList.append(formatMatchesLine(line + matchesList.pop(matchesList.index(line) + 1)))
                newList.append((formatMatchesLine(makeUntilEnd(line, matchesList))))
    return newList


def availableTransItem(transItems):
    """
    检查指纹匹配信息是否合法

    :param transItems:
    :return: bool
    """
    for key in transItems.keys():
        if key in FINGERPRINT.ALLOW_MATCHES_VALUE_TYPE:
            return True
    return False


def availableTypes(matchesTypes):
    """
    校验匹配方式的有效性

    :param matchesTypes: 解析的匹配方式
    :return: bool
    """
    for method in matchesTypes.keys():
        if method in FINGERPRINT.ALLOW_MATCHES_VALUE_TYPE:
            return True
    return False


def parse_matches(matches):
    """
    解析whatWebs的matches

    :param matches: hatWebs matches数组字符串
    :return: ExpDepos指纹信息列表
    """
    fpMatches = []
    # matches_list = re.findall(r"{((?:.|\n)*?)}", matches)
    matches_list = parse_matchesList(matches)
    for matches_item in matches_list:
        transItems = transform(matches_item.strip().replace("\n", ""))
        if transItems:
            checkItem = availableTransItem(transItems)
            if not checkItem:
                # console.warning("[yellow]未校验通过的指纹配置项: {0}".format(transItems))
                continue
            fpMatches.append(transItems)
    return fpMatches


def reg_whatWebsFp(file, filePath):
    """
    注册whatWebs的指纹信息

    :param file: whatWebs指纹信息文件名
    :param filePath: whatWebs指纹信息路径
    :return: 转换为ExpDepos指纹信息的whatWebs指纹信息
    """
    whatWebsFp = {
        "type": FINGERPRINT.FP_TYPE.WEBAPP,
        "fileName": file.replace(".rb", "")
    }
    with open(filePath + os.sep + file, "r", encoding="UTF-8") as fpFile:
        content = fpFile.read()
        name = re.search(r"name\s[\"'](.+)[\"']", content)
        if name:
            name = name.group(1)
            whatWebsFp.update({"name": name})
        version = re.search(r"version\s[\"'](.+)[\"']", content)
        if version:
            version = version.group(1)
            whatWebsFp.update({"version": version})
        description = re.search(r"description\s[\"'](.+)[\"']", content)
        if description:
            description = description.group(1)
            whatWebsFp.update({"description": description})
        website = re.search(r"website\s[\"'](.+)[\"']", content)
        if website:
            website = website.group(1)
            whatWebsFp.update({"website": website})
        match = re.search(r"authors\s\[((?:.|\n)*?)\]", content)
        author = match.group(1).replace("\n", "")
        author = [aut.strip().strip("\"") for aut in author.split(",") if aut.strip().strip("\"")]
        if author:
            whatWebsFp.update({"author": author})
        matches = re.search(r"matches\s\[((?:.|\n)*)\]", content)
        if matches:
            matches = matches.group(1).strip()
            matches = parse_matches(matches)
            whatWebsFp.update({"matches": matches})
        else:
            return None
    return whatWebsFp


class register(ExploitBase):
    Name = "whatWebs fingerprint register"
    Author = "Castiel"
    Alias = "wwfpr"
    Category = EXP_CATEGORY.TOOLS.AIDE
    VulType = VUL_TYPE.OTHER
    Create_Date = '2021-11-08'
    Update_Date = '2021-11-08'
    Rank = 'Excellent'
    AppPowerLink = 'https://github.com/winezer0/whatweb-plus'
    AppName = 'whatweb-plus'
    AppVersion = '02109100000'
    Desc = """将whatweb指纹转换为ExpDepos指纹"""

    def _fingers(self):
        pass

    def _options(self):
        options = dict()
        options["action"] = OptString("regFps", description="需要执行的功能模块", require=True)
        options["path"] = OptString("", description="whatweb指纹路径", require=True)
        return options

    def _verify(self):
        return self._exploit()

    def _exploit(self):
        if self.get_option("action") == "regFps":
            filePath = self.get_option("path")
            if not filePath:
                raise ExpDeposExploitException("请使用-P或者--option设置path参数.")
            fileList = os.listdir(path=filePath)
            success = 0
            failed = 0
            ignore = 0
            with Progress() as progress:
                task = progress.add_task(formatPgString("[green]正在转换whatWebs指纹信息...[/green]"), total=len(fileList))
                for file in fileList:
                    if not file.endswith('.rb'):
                        progress.print(formatPgString("忽略非指纹文件：[yellow]{0}[/yellow]".format(file)))
                        ignore += 1
                        continue
                    whatWebsFp = reg_whatWebsFp(file=file, filePath=filePath)
                    if whatWebsFp is None:
                        progress.print(formatPgString("文件: [magenta3]{0}[/magenta3] 转换失败.".format(file)))
                        failed += 1
                        continue
                    if fp_register(whatWebsFp):
                        success += 1
                    else:
                        progress.print(formatPgString("文件: [red]{0}[/red] 注册失败.".format(file)))
                        failed += 1
                    progress.update(task, advance=1)
            console.info("whatWebs指纹信息转换完成, 成功: {0}, 失败: {1}, 忽略: {2}".format(success, failed, ignore))

    def _clean(self):
        pass
