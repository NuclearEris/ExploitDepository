#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/3/10 11:23
"""

from .TDOABase import *


class Test(TdoaBase):
    """
    Exploit模块实现,用户按照如下规则编写自己的Exploit
    1.  模块基本信息属性使用全大写或首字母大写方式(ex:NAME or Name or Create_Date)
        属性值若有多个可以使用列表(ex:Author = ["author1", "another author"])
        描述信息Description和Desc支持Markdown语法
        除下列默认属性外，用户可自定义其他信息属性
    """
    Name = 'Test Exploit'                               # exp名称
    Author = 'Castiel'                                  # 编写作者
    Create_Date = '2021-07-01'                          # exp编写日期
    Update_Date = '2021-07-01'                          # exp更新日期
    Rank = 'Excellent'                                  # exp效果(可选：Excellent Great Good Normal Average # Low Manual)
    AppPowerLink = 'https://www.tongda2000.com/'        # 漏洞厂商主页地址
    AppName = 'TD_OA'                                   # 漏洞应用名称
    AppVersion = '3.x - 11.6'                           # 漏洞影响版本
    References = ['https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2017/MS17-010',
                  'https://nvd.nist.gov/vuln/detail/CVE-XXX-XXX',
                  'https://github.com/xxx/xxx']
    Desc = """
## 漏洞简要描述支持Markdown语法
`通达OA` 任意用户登录漏洞
    """
    Description = """
# Exploit文档支持Markdown语法
## This is an h2

Rich can do a pretty *decent* job of rendering markdown.

1. This is a list item
2. This is another list item
        """

    def _options(self):
        options = dict()
        options["UserName"] = OptString("", description="系统用户名", require=True)
        options["Password"] = OptString("", description="密码", require=True)
        options["notRequire"] = OptString("", description="测试非必须选项")
        return options

    def _verify(self):
        pass

    def _exploit(self):
        pass

    def _clean(self):
        pass
