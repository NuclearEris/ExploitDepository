# -*- coding: utf8 -*-
import sys
import json
import base64
import requests
import traceback
from urllib.parse import urlparse


def filterHeaders(headers: dict) -> dict:
    """
    过滤掉API网关添加的请求头及proxy_endpoint

    :param headers: dict headers
    :return: dicts
    """
    removeList = ["proxy_endpoint", "requestsource", "x-api-requestid",
                  "x-api-scheme", "x-b3-traceid", "x-qualifier",
                  "authorization", "date", "source", "x-consumer-id"
                  ]
    return {key: value for key, value in headers.items() if key.lower() not in removeList}


def main_handler(event, context):
    if "proxy_endpoint" not in event["headers"]:
        return {
            "isBase64Encoded": False,
            "statusCode": -1,
            "headers": json.dumps(event["headers"]),
            "body": json.dumps("Please set the URL in the proxy_endpoint parameter of the request headers."),
            "request": ""
        }
    endpoint = event["headers"]["proxy_endpoint"]
    headers = filterHeaders(event["headers"])
    # 更改请求头中的host值
    headers["host"] = urlparse(endpoint).netloc
    try:
        response = requests.request(event["httpMethod"],
                                    url=endpoint,
                                    headers=headers,
                                    data=base64.b64decode(event['body']),
                                    params=event['queryString'],
                                    verify=False
                                    )
    except Exception:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        return {
            "isBase64Encoded": False,
            "statusCode": -1,
            "headers": json.dumps(event["headers"]),
            "body": json.dumps(repr(traceback.format_tb(exc_traceback))),
            "request": json.dumps({"url": endpoint, "headers": headers, "params": event['queryString']})
        }
    resp = {
        "isBase64Encoded": True,
        "statusCode": response.status_code,
        "headers": json.dumps(dict(response.headers)),
        "body": str(base64.b64encode(response.content), encoding="UTF-8"),
        "request": json.dumps({"url": endpoint, "headers": headers, "params": event['queryString']})
    }
    return resp
